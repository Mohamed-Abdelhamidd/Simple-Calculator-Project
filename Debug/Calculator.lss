
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00003206  0000329a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  000032ae  2**0
                  ALLOC
  3 .stab         0000255c  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c75  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006481  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000837a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009265  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 09 	call	0x132c	; 0x132c <main>
      8a:	0c 94 01 19 	jmp	0x3202	; 0x3202 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
/*Description:
 * this function is responsible on looping on the rows and making each row as output
 * and then check each column input for the pull up value and then using an equation
 * it return the number of the button after adjusting it using another function */
uint8 KEYPAD_getPressedKey (void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c8 54       	subi	r28, 0x48	; 72
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 row;

	/*setup pins all pins as input pin*/
	DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+0, PIN_INPUT);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+1, PIN_INPUT);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+2, PIN_INPUT);
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	64 e0       	ldi	r22, 0x04	; 4
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+3, PIN_INPUT);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>

	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN3_ID, PIN_INPUT);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN5_ID, PIN_INPUT);
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	65 e0       	ldi	r22, 0x05	; 5
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN6_ID, PIN_INPUT);
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	66 e0       	ldi	r22, 0x06	; 6
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN7_ID, PIN_INPUT);
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	67 e0       	ldi	r22, 0x07	; 7
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>

	while (1)
	{
		for (row = 0; row < KEYPAD_ROWS_NUMBER ; row++)
     bb0:	fe 01       	movw	r30, r28
     bb2:	e9 5b       	subi	r30, 0xB9	; 185
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	10 82       	st	Z, r1
     bb8:	fd c2       	rjmp	.+1530   	; 0x11b4 <KEYPAD_getPressedKey+0x66e>
		{
			/*setting up each pin in order as an output with zero and if detected zero using columns
			 * so this means that one of the keys is pressed*/
			DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+row, PIN_OUTPUT);
     bba:	fe 01       	movw	r30, r28
     bbc:	e9 5b       	subi	r30, 0xB9	; 185
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	98 2f       	mov	r25, r24
     bc4:	9e 5f       	subi	r25, 0xFE	; 254
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	69 2f       	mov	r22, r25
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
			DIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+row, LOGIC_LOW);
     bd0:	fe 01       	movw	r30, r28
     bd2:	e9 5b       	subi	r30, 0xB9	; 185
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 81       	ld	r24, Z
     bd8:	98 2f       	mov	r25, r24
     bda:	9e 5f       	subi	r25, 0xFE	; 254
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	69 2f       	mov	r22, r25
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>

			/*because columns pins at eta32 board aren't near each other so i didn't use loop*/
			if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN7_ID) == KEYPAD_BUTTON_PRESSED){
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     bee:	88 23       	and	r24, r24
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <KEYPAD_getPressedKey+0xae>
     bf2:	9d c0       	rjmp	.+314    	; 0xd2e <KEYPAD_getPressedKey+0x1e8>
     bf4:	fe 01       	movw	r30, r28
     bf6:	ed 5b       	subi	r30, 0xBD	; 189
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 ea       	ldi	r26, 0xA0	; 160
     c00:	b2 e4       	ldi	r27, 0x42	; 66
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0a:	8e 01       	movw	r16, r28
     c0c:	01 5c       	subi	r16, 0xC1	; 193
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
     c10:	fe 01       	movw	r30, r28
     c12:	ed 5b       	subi	r30, 0xBD	; 189
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	60 81       	ld	r22, Z
     c18:	71 81       	ldd	r23, Z+1	; 0x01
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	4a e7       	ldi	r20, 0x7A	; 122
     c24:	55 e4       	ldi	r21, 0x45	; 69
     c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	f8 01       	movw	r30, r16
     c30:	80 83       	st	Z, r24
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	a2 83       	std	Z+2, r26	; 0x02
     c36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c38:	fe 01       	movw	r30, r28
     c3a:	ff 96       	adiw	r30, 0x3f	; 63
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c50:	88 23       	and	r24, r24
     c52:	2c f4       	brge	.+10     	; 0xc5e <KEYPAD_getPressedKey+0x118>
		__ticks = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9e af       	std	Y+62, r25	; 0x3e
     c5a:	8d af       	std	Y+61, r24	; 0x3d
     c5c:	46 c0       	rjmp	.+140    	; 0xcea <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
     c5e:	fe 01       	movw	r30, r28
     c60:	ff 96       	adiw	r30, 0x3f	; 63
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	4f e7       	ldi	r20, 0x7F	; 127
     c70:	57 e4       	ldi	r21, 0x47	; 71
     c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c76:	18 16       	cp	r1, r24
     c78:	64 f5       	brge	.+88     	; 0xcd2 <KEYPAD_getPressedKey+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	fe 01       	movw	r30, r28
     c7c:	ed 5b       	subi	r30, 0xBD	; 189
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	60 81       	ld	r22, Z
     c82:	71 81       	ldd	r23, Z+1	; 0x01
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	51 e4       	ldi	r21, 0x41	; 65
     c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	9e af       	std	Y+62, r25	; 0x3e
     ca6:	8d af       	std	Y+61, r24	; 0x3d
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <KEYPAD_getPressedKey+0x182>
     caa:	80 e9       	ldi	r24, 0x90	; 144
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	9c af       	std	Y+60, r25	; 0x3c
     cb0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb2:	8b ad       	ldd	r24, Y+59	; 0x3b
     cb4:	9c ad       	ldd	r25, Y+60	; 0x3c
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <KEYPAD_getPressedKey+0x170>
     cba:	9c af       	std	Y+60, r25	; 0x3c
     cbc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbe:	8d ad       	ldd	r24, Y+61	; 0x3d
     cc0:	9e ad       	ldd	r25, Y+62	; 0x3e
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	9e af       	std	Y+62, r25	; 0x3e
     cc6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc8:	8d ad       	ldd	r24, Y+61	; 0x3d
     cca:	9e ad       	ldd	r25, Y+62	; 0x3e
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	69 f7       	brne	.-38     	; 0xcaa <KEYPAD_getPressedKey+0x164>
     cd0:	16 c0       	rjmp	.+44     	; 0xcfe <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd2:	fe 01       	movw	r30, r28
     cd4:	ff 96       	adiw	r30, 0x3f	; 63
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	9e af       	std	Y+62, r25	; 0x3e
     ce8:	8d af       	std	Y+61, r24	; 0x3d
     cea:	8d ad       	ldd	r24, Y+61	; 0x3d
     cec:	9e ad       	ldd	r25, Y+62	; 0x3e
     cee:	9a af       	std	Y+58, r25	; 0x3a
     cf0:	89 af       	std	Y+57, r24	; 0x39
     cf2:	89 ad       	ldd	r24, Y+57	; 0x39
     cf4:	9a ad       	ldd	r25, Y+58	; 0x3a
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <KEYPAD_getPressedKey+0x1b0>
     cfa:	9a af       	std	Y+58, r25	; 0x3a
     cfc:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(80);//delay for bouncing issue then check again after the button is stable
	 			if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN7_ID) == KEYPAD_BUTTON_PRESSED){
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	67 e0       	ldi	r22, 0x07	; 7
     d02:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     d06:	88 23       	and	r24, r24
     d08:	09 f0       	breq	.+2      	; 0xd0c <KEYPAD_getPressedKey+0x1c6>
     d0a:	c3 c1       	rjmp	.+902    	; 0x1092 <KEYPAD_getPressedKey+0x54c>
	 				/*return the number of the keypad by this equation after calling adjust function
	 				 * to define the needed values to return from these buttons*/
					return KEYPADeta32_adjust4x4((row*KEYPAD_COLUMNS_NUMBER)+1);
     d0c:	fe 01       	movw	r30, r28
     d0e:	e9 5b       	subi	r30, 0xB9	; 185
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	80 81       	ld	r24, Z
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <KEYPADeta32_adjust4x4>
     d26:	29 96       	adiw	r28, 0x09	; 9
     d28:	8f af       	std	Y+63, r24	; 0x3f
     d2a:	29 97       	sbiw	r28, 0x09	; 9
     d2c:	4b c2       	rjmp	.+1174   	; 0x11c4 <KEYPAD_getPressedKey+0x67e>
				}
			}
			else if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN6_ID)== KEYPAD_BUTTON_PRESSED)
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	66 e0       	ldi	r22, 0x06	; 6
     d32:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     d36:	88 23       	and	r24, r24
     d38:	09 f0       	breq	.+2      	; 0xd3c <KEYPAD_getPressedKey+0x1f6>
     d3a:	8a c0       	rjmp	.+276    	; 0xe50 <KEYPAD_getPressedKey+0x30a>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 ea       	ldi	r26, 0xA0	; 160
     d42:	b2 e4       	ldi	r27, 0x42	; 66
     d44:	8d ab       	std	Y+53, r24	; 0x35
     d46:	9e ab       	std	Y+54, r25	; 0x36
     d48:	af ab       	std	Y+55, r26	; 0x37
     d4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4c:	6d a9       	ldd	r22, Y+53	; 0x35
     d4e:	7e a9       	ldd	r23, Y+54	; 0x36
     d50:	8f a9       	ldd	r24, Y+55	; 0x37
     d52:	98 ad       	ldd	r25, Y+56	; 0x38
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	55 e4       	ldi	r21, 0x45	; 69
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	89 ab       	std	Y+49, r24	; 0x31
     d66:	9a ab       	std	Y+50, r25	; 0x32
     d68:	ab ab       	std	Y+51, r26	; 0x33
     d6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d6c:	69 a9       	ldd	r22, Y+49	; 0x31
     d6e:	7a a9       	ldd	r23, Y+50	; 0x32
     d70:	8b a9       	ldd	r24, Y+51	; 0x33
     d72:	9c a9       	ldd	r25, Y+52	; 0x34
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <KEYPAD_getPressedKey+0x248>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	98 ab       	std	Y+48, r25	; 0x30
     d8a:	8f a7       	std	Y+47, r24	; 0x2f
     d8c:	3f c0       	rjmp	.+126    	; 0xe0c <KEYPAD_getPressedKey+0x2c6>
	else if (__tmp > 65535)
     d8e:	69 a9       	ldd	r22, Y+49	; 0x31
     d90:	7a a9       	ldd	r23, Y+50	; 0x32
     d92:	8b a9       	ldd	r24, Y+51	; 0x33
     d94:	9c a9       	ldd	r25, Y+52	; 0x34
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	4c f5       	brge	.+82     	; 0xdf8 <KEYPAD_getPressedKey+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	6d a9       	ldd	r22, Y+53	; 0x35
     da8:	7e a9       	ldd	r23, Y+54	; 0x36
     daa:	8f a9       	ldd	r24, Y+55	; 0x37
     dac:	98 ad       	ldd	r25, Y+56	; 0x38
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	98 ab       	std	Y+48, r25	; 0x30
     dcc:	8f a7       	std	Y+47, r24	; 0x2f
     dce:	0f c0       	rjmp	.+30     	; 0xdee <KEYPAD_getPressedKey+0x2a8>
     dd0:	80 e9       	ldi	r24, 0x90	; 144
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9e a7       	std	Y+46, r25	; 0x2e
     dd6:	8d a7       	std	Y+45, r24	; 0x2d
     dd8:	8d a5       	ldd	r24, Y+45	; 0x2d
     dda:	9e a5       	ldd	r25, Y+46	; 0x2e
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <KEYPAD_getPressedKey+0x296>
     de0:	9e a7       	std	Y+46, r25	; 0x2e
     de2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	8f a5       	ldd	r24, Y+47	; 0x2f
     de6:	98 a9       	ldd	r25, Y+48	; 0x30
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	98 ab       	std	Y+48, r25	; 0x30
     dec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dee:	8f a5       	ldd	r24, Y+47	; 0x2f
     df0:	98 a9       	ldd	r25, Y+48	; 0x30
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f7       	brne	.-38     	; 0xdd0 <KEYPAD_getPressedKey+0x28a>
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <KEYPAD_getPressedKey+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	69 a9       	ldd	r22, Y+49	; 0x31
     dfa:	7a a9       	ldd	r23, Y+50	; 0x32
     dfc:	8b a9       	ldd	r24, Y+51	; 0x33
     dfe:	9c a9       	ldd	r25, Y+52	; 0x34
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	98 ab       	std	Y+48, r25	; 0x30
     e0a:	8f a7       	std	Y+47, r24	; 0x2f
     e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e0e:	98 a9       	ldd	r25, Y+48	; 0x30
     e10:	9c a7       	std	Y+44, r25	; 0x2c
     e12:	8b a7       	std	Y+43, r24	; 0x2b
     e14:	8b a5       	ldd	r24, Y+43	; 0x2b
     e16:	9c a5       	ldd	r25, Y+44	; 0x2c
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <KEYPAD_getPressedKey+0x2d2>
     e1c:	9c a7       	std	Y+44, r25	; 0x2c
     e1e:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(80);
				if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN6_ID)== KEYPAD_BUTTON_PRESSED)
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	66 e0       	ldi	r22, 0x06	; 6
     e24:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     e28:	88 23       	and	r24, r24
     e2a:	09 f0       	breq	.+2      	; 0xe2e <KEYPAD_getPressedKey+0x2e8>
     e2c:	32 c1       	rjmp	.+612    	; 0x1092 <KEYPAD_getPressedKey+0x54c>
				{
					return KEYPADeta32_adjust4x4((row*KEYPAD_COLUMNS_NUMBER)+2);
     e2e:	fe 01       	movw	r30, r28
     e30:	e9 5b       	subi	r30, 0xB9	; 185
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <KEYPADeta32_adjust4x4>
     e48:	29 96       	adiw	r28, 0x09	; 9
     e4a:	8f af       	std	Y+63, r24	; 0x3f
     e4c:	29 97       	sbiw	r28, 0x09	; 9
     e4e:	ba c1       	rjmp	.+884    	; 0x11c4 <KEYPAD_getPressedKey+0x67e>
				}
			}
			else if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN5_ID)== KEYPAD_BUTTON_PRESSED)
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     e58:	88 23       	and	r24, r24
     e5a:	09 f0       	breq	.+2      	; 0xe5e <KEYPAD_getPressedKey+0x318>
     e5c:	8a c0       	rjmp	.+276    	; 0xf72 <KEYPAD_getPressedKey+0x42c>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a0 ea       	ldi	r26, 0xA0	; 160
     e64:	b2 e4       	ldi	r27, 0x42	; 66
     e66:	8f a3       	std	Y+39, r24	; 0x27
     e68:	98 a7       	std	Y+40, r25	; 0x28
     e6a:	a9 a7       	std	Y+41, r26	; 0x29
     e6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6e:	6f a1       	ldd	r22, Y+39	; 0x27
     e70:	78 a5       	ldd	r23, Y+40	; 0x28
     e72:	89 a5       	ldd	r24, Y+41	; 0x29
     e74:	9a a5       	ldd	r25, Y+42	; 0x2a
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a e7       	ldi	r20, 0x7A	; 122
     e7c:	55 e4       	ldi	r21, 0x45	; 69
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	8b a3       	std	Y+35, r24	; 0x23
     e88:	9c a3       	std	Y+36, r25	; 0x24
     e8a:	ad a3       	std	Y+37, r26	; 0x25
     e8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e8e:	6b a1       	ldd	r22, Y+35	; 0x23
     e90:	7c a1       	ldd	r23, Y+36	; 0x24
     e92:	8d a1       	ldd	r24, Y+37	; 0x25
     e94:	9e a1       	ldd	r25, Y+38	; 0x26
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <KEYPAD_getPressedKey+0x36a>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9a a3       	std	Y+34, r25	; 0x22
     eac:	89 a3       	std	Y+33, r24	; 0x21
     eae:	3f c0       	rjmp	.+126    	; 0xf2e <KEYPAD_getPressedKey+0x3e8>
	else if (__tmp > 65535)
     eb0:	6b a1       	ldd	r22, Y+35	; 0x23
     eb2:	7c a1       	ldd	r23, Y+36	; 0x24
     eb4:	8d a1       	ldd	r24, Y+37	; 0x25
     eb6:	9e a1       	ldd	r25, Y+38	; 0x26
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	4c f5       	brge	.+82     	; 0xf1a <KEYPAD_getPressedKey+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec8:	6f a1       	ldd	r22, Y+39	; 0x27
     eca:	78 a5       	ldd	r23, Y+40	; 0x28
     ecc:	89 a5       	ldd	r24, Y+41	; 0x29
     ece:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e2       	ldi	r20, 0x20	; 32
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9a a3       	std	Y+34, r25	; 0x22
     eee:	89 a3       	std	Y+33, r24	; 0x21
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <KEYPAD_getPressedKey+0x3ca>
     ef2:	80 e9       	ldi	r24, 0x90	; 144
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	98 a3       	std	Y+32, r25	; 0x20
     ef8:	8f 8f       	std	Y+31, r24	; 0x1f
     efa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     efc:	98 a1       	ldd	r25, Y+32	; 0x20
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <KEYPAD_getPressedKey+0x3b8>
     f02:	98 a3       	std	Y+32, r25	; 0x20
     f04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f06:	89 a1       	ldd	r24, Y+33	; 0x21
     f08:	9a a1       	ldd	r25, Y+34	; 0x22
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	9a a3       	std	Y+34, r25	; 0x22
     f0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	89 a1       	ldd	r24, Y+33	; 0x21
     f12:	9a a1       	ldd	r25, Y+34	; 0x22
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	69 f7       	brne	.-38     	; 0xef2 <KEYPAD_getPressedKey+0x3ac>
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <KEYPAD_getPressedKey+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1a:	6b a1       	ldd	r22, Y+35	; 0x23
     f1c:	7c a1       	ldd	r23, Y+36	; 0x24
     f1e:	8d a1       	ldd	r24, Y+37	; 0x25
     f20:	9e a1       	ldd	r25, Y+38	; 0x26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	89 a1       	ldd	r24, Y+33	; 0x21
     f30:	9a a1       	ldd	r25, Y+34	; 0x22
     f32:	9e 8f       	std	Y+30, r25	; 0x1e
     f34:	8d 8f       	std	Y+29, r24	; 0x1d
     f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f38:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <KEYPAD_getPressedKey+0x3f4>
     f3e:	9e 8f       	std	Y+30, r25	; 0x1e
     f40:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(80);
				if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN5_ID)== KEYPAD_BUTTON_PRESSED){
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	65 e0       	ldi	r22, 0x05	; 5
     f46:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     f4a:	88 23       	and	r24, r24
     f4c:	09 f0       	breq	.+2      	; 0xf50 <KEYPAD_getPressedKey+0x40a>
     f4e:	a1 c0       	rjmp	.+322    	; 0x1092 <KEYPAD_getPressedKey+0x54c>
					return KEYPADeta32_adjust4x4((row*KEYPAD_COLUMNS_NUMBER)+3);
     f50:	fe 01       	movw	r30, r28
     f52:	e9 5b       	subi	r30, 0xB9	; 185
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	8d 5f       	subi	r24, 0xFD	; 253
     f66:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <KEYPADeta32_adjust4x4>
     f6a:	29 96       	adiw	r28, 0x09	; 9
     f6c:	8f af       	std	Y+63, r24	; 0x3f
     f6e:	29 97       	sbiw	r28, 0x09	; 9
     f70:	29 c1       	rjmp	.+594    	; 0x11c4 <KEYPAD_getPressedKey+0x67e>
				}
			}
			else if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN3_ID)== KEYPAD_BUTTON_PRESSED)
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	63 e0       	ldi	r22, 0x03	; 3
     f76:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
     f7a:	88 23       	and	r24, r24
     f7c:	09 f0       	breq	.+2      	; 0xf80 <KEYPAD_getPressedKey+0x43a>
     f7e:	89 c0       	rjmp	.+274    	; 0x1092 <KEYPAD_getPressedKey+0x54c>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 ea       	ldi	r26, 0xA0	; 160
     f86:	b2 e4       	ldi	r27, 0x42	; 66
     f88:	89 8f       	std	Y+25, r24	; 0x19
     f8a:	9a 8f       	std	Y+26, r25	; 0x1a
     f8c:	ab 8f       	std	Y+27, r26	; 0x1b
     f8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	69 8d       	ldd	r22, Y+25	; 0x19
     f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a e7       	ldi	r20, 0x7A	; 122
     f9e:	55 e4       	ldi	r21, 0x45	; 69
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8d 8b       	std	Y+21, r24	; 0x15
     faa:	9e 8b       	std	Y+22, r25	; 0x16
     fac:	af 8b       	std	Y+23, r26	; 0x17
     fae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <KEYPAD_getPressedKey+0x48c>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <KEYPAD_getPressedKey+0x50a>
	else if (__tmp > 65535)
     fd2:	6d 89       	ldd	r22, Y+21	; 0x15
     fd4:	7e 89       	ldd	r23, Y+22	; 0x16
     fd6:	8f 89       	ldd	r24, Y+23	; 0x17
     fd8:	98 8d       	ldd	r25, Y+24	; 0x18
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <KEYPAD_getPressedKey+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	69 8d       	ldd	r22, Y+25	; 0x19
     fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9c 8b       	std	Y+20, r25	; 0x14
    1010:	8b 8b       	std	Y+19, r24	; 0x13
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <KEYPAD_getPressedKey+0x4ec>
    1014:	80 e9       	ldi	r24, 0x90	; 144
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	9a 8b       	std	Y+18, r25	; 0x12
    101a:	89 8b       	std	Y+17, r24	; 0x11
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	9a 89       	ldd	r25, Y+18	; 0x12
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <KEYPAD_getPressedKey+0x4da>
    1024:	9a 8b       	std	Y+18, r25	; 0x12
    1026:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8b 89       	ldd	r24, Y+19	; 0x13
    102a:	9c 89       	ldd	r25, Y+20	; 0x14
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9c 8b       	std	Y+20, r25	; 0x14
    1030:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8b 89       	ldd	r24, Y+19	; 0x13
    1034:	9c 89       	ldd	r25, Y+20	; 0x14
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <KEYPAD_getPressedKey+0x4ce>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <KEYPAD_getPressedKey+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6d 89       	ldd	r22, Y+21	; 0x15
    103e:	7e 89       	ldd	r23, Y+22	; 0x16
    1040:	8f 89       	ldd	r24, Y+23	; 0x17
    1042:	98 8d       	ldd	r25, Y+24	; 0x18
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9c 8b       	std	Y+20, r25	; 0x14
    104e:	8b 8b       	std	Y+19, r24	; 0x13
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	9c 89       	ldd	r25, Y+20	; 0x14
    1054:	98 8b       	std	Y+16, r25	; 0x10
    1056:	8f 87       	std	Y+15, r24	; 0x0f
    1058:	8f 85       	ldd	r24, Y+15	; 0x0f
    105a:	98 89       	ldd	r25, Y+16	; 0x10
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <KEYPAD_getPressedKey+0x516>
    1060:	98 8b       	std	Y+16, r25	; 0x10
    1062:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(80);
				if (DIO_readPin(KEYPAD_COL_PORT_ID, PIN3_ID)== KEYPAD_BUTTON_PRESSED){
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_readPin>
    106c:	88 23       	and	r24, r24
    106e:	89 f4       	brne	.+34     	; 0x1092 <KEYPAD_getPressedKey+0x54c>
					return KEYPADeta32_adjust4x4((row*KEYPAD_COLUMNS_NUMBER)+4);
    1070:	fe 01       	movw	r30, r28
    1072:	e9 5b       	subi	r30, 0xB9	; 185
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <KEYPADeta32_adjust4x4>
    108a:	29 96       	adiw	r28, 0x09	; 9
    108c:	8f af       	std	Y+63, r24	; 0x3f
    108e:	29 97       	sbiw	r28, 0x09	; 9
    1090:	99 c0       	rjmp	.+306    	; 0x11c4 <KEYPAD_getPressedKey+0x67e>
				}
			}
			/*write on the pin high to disable it*/
			DIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+row, LOGIC_HIGH);
    1092:	fe 01       	movw	r30, r28
    1094:	e9 5b       	subi	r30, 0xB9	; 185
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	98 2f       	mov	r25, r24
    109c:	9e 5f       	subi	r25, 0xFE	; 254
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	69 2f       	mov	r22, r25
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
			/*then define it back as an inout*/
			DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+row, PIN_INPUT);
    10a8:	fe 01       	movw	r30, r28
    10aa:	e9 5b       	subi	r30, 0xB9	; 185
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	98 2f       	mov	r25, r24
    10b2:	9e 5f       	subi	r25, 0xFE	; 254
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	69 2f       	mov	r22, r25
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e2       	ldi	r26, 0x20	; 32
    10c4:	b1 e4       	ldi	r27, 0x41	; 65
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	ad 87       	std	Y+13, r26	; 0x0d
    10cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a e7       	ldi	r20, 0x7A	; 122
    10dc:	55 e4       	ldi	r21, 0x45	; 69
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8f 83       	std	Y+7, r24	; 0x07
    10e8:	98 87       	std	Y+8, r25	; 0x08
    10ea:	a9 87       	std	Y+9, r26	; 0x09
    10ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ee:	6f 81       	ldd	r22, Y+7	; 0x07
    10f0:	78 85       	ldd	r23, Y+8	; 0x08
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <KEYPAD_getPressedKey+0x5ca>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	3f c0       	rjmp	.+126    	; 0x118e <KEYPAD_getPressedKey+0x648>
	else if (__tmp > 65535)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <KEYPAD_getPressedKey+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <KEYPAD_getPressedKey+0x62a>
    1152:	80 e9       	ldi	r24, 0x90	; 144
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <KEYPAD_getPressedKey+0x618>
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <KEYPAD_getPressedKey+0x60c>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <KEYPAD_getPressedKey+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <KEYPAD_getPressedKey+0x654>
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN6_ID, PIN_INPUT);
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, PIN7_ID, PIN_INPUT);

	while (1)
	{
		for (row = 0; row < KEYPAD_ROWS_NUMBER ; row++)
    11a2:	de 01       	movw	r26, r28
    11a4:	a9 5b       	subi	r26, 0xB9	; 185
    11a6:	bf 4f       	sbci	r27, 0xFF	; 255
    11a8:	fe 01       	movw	r30, r28
    11aa:	e9 5b       	subi	r30, 0xB9	; 185
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 5f       	subi	r24, 0xFF	; 255
    11b2:	8c 93       	st	X, r24
    11b4:	fe 01       	movw	r30, r28
    11b6:	e9 5b       	subi	r30, 0xB9	; 185
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 81       	ld	r24, Z
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <KEYPAD_getPressedKey+0x67c>
    11c0:	fc cc       	rjmp	.-1544   	; 0xbba <KEYPAD_getPressedKey+0x74>
    11c2:	f6 cc       	rjmp	.-1556   	; 0xbb0 <KEYPAD_getPressedKey+0x6a>
			/*then define it back as an inout*/
			DIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_ID+row, PIN_INPUT);
			/*delay to get a value without problems*/
			_delay_ms(10);
		}
	}
    11c4:	29 96       	adiw	r28, 0x09	; 9
    11c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    11c8:	29 97       	sbiw	r28, 0x09	; 9
}
    11ca:	c8 5b       	subi	r28, 0xB8	; 184
    11cc:	df 4f       	sbci	r29, 0xFF	; 255
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <KEYPADeta32_adjust4x4>:
 * function that returns the defined numbers after redefining them and giving each
 * number a proper value
 *Arguments:
 * number: value we got after the equation defining */
uint8 KEYPADeta32_adjust4x4(uint8 number)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <KEYPADeta32_adjust4x4+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <KEYPADeta32_adjust4x4+0x8>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pressedKey;
	switch (number)
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3c 83       	std	Y+4, r19	; 0x04
    11f8:	2b 83       	std	Y+3, r18	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <KEYPADeta32_adjust4x4+0x24>
    1204:	6e c0       	rjmp	.+220    	; 0x12e2 <KEYPADeta32_adjust4x4+0x100>
    1206:	2b 81       	ldd	r18, Y+3	; 0x03
    1208:	3c 81       	ldd	r19, Y+4	; 0x04
    120a:	29 30       	cpi	r18, 0x09	; 9
    120c:	31 05       	cpc	r19, r1
    120e:	54 f5       	brge	.+84     	; 0x1264 <KEYPADeta32_adjust4x4+0x82>
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	84 30       	cpi	r24, 0x04	; 4
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <KEYPADeta32_adjust4x4+0x3a>
    121a:	57 c0       	rjmp	.+174    	; 0x12ca <KEYPADeta32_adjust4x4+0xe8>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	25 30       	cpi	r18, 0x05	; 5
    1222:	31 05       	cpc	r19, r1
    1224:	94 f4       	brge	.+36     	; 0x124a <KEYPADeta32_adjust4x4+0x68>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <KEYPADeta32_adjust4x4+0x50>
    1230:	47 c0       	rjmp	.+142    	; 0x12c0 <KEYPADeta32_adjust4x4+0xde>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	23 30       	cpi	r18, 0x03	; 3
    1238:	31 05       	cpc	r19, r1
    123a:	0c f0       	brlt	.+2      	; 0x123e <KEYPADeta32_adjust4x4+0x5c>
    123c:	43 c0       	rjmp	.+134    	; 0x12c4 <KEYPADeta32_adjust4x4+0xe2>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	c9 f1       	breq	.+114    	; 0x12ba <KEYPADeta32_adjust4x4+0xd8>
    1248:	67 c0       	rjmp	.+206    	; 0x1318 <KEYPADeta32_adjust4x4+0x136>
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	26 30       	cpi	r18, 0x06	; 6
    1250:	31 05       	cpc	r19, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <KEYPADeta32_adjust4x4+0x74>
    1254:	40 c0       	rjmp	.+128    	; 0x12d6 <KEYPADeta32_adjust4x4+0xf4>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	87 30       	cpi	r24, 0x07	; 7
    125c:	91 05       	cpc	r25, r1
    125e:	0c f0       	brlt	.+2      	; 0x1262 <KEYPADeta32_adjust4x4+0x80>
    1260:	3d c0       	rjmp	.+122    	; 0x12dc <KEYPADeta32_adjust4x4+0xfa>
    1262:	36 c0       	rjmp	.+108    	; 0x12d0 <KEYPADeta32_adjust4x4+0xee>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	2c 30       	cpi	r18, 0x0C	; 12
    126a:	31 05       	cpc	r19, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <KEYPADeta32_adjust4x4+0x8e>
    126e:	45 c0       	rjmp	.+138    	; 0x12fa <KEYPADeta32_adjust4x4+0x118>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	8d 30       	cpi	r24, 0x0D	; 13
    1276:	91 05       	cpc	r25, r1
    1278:	5c f4       	brge	.+22     	; 0x1290 <KEYPADeta32_adjust4x4+0xae>
    127a:	2b 81       	ldd	r18, Y+3	; 0x03
    127c:	3c 81       	ldd	r19, Y+4	; 0x04
    127e:	2a 30       	cpi	r18, 0x0A	; 10
    1280:	31 05       	cpc	r19, r1
    1282:	a9 f1       	breq	.+106    	; 0x12ee <KEYPADeta32_adjust4x4+0x10c>
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	8b 30       	cpi	r24, 0x0B	; 11
    128a:	91 05       	cpc	r25, r1
    128c:	9c f5       	brge	.+102    	; 0x12f4 <KEYPADeta32_adjust4x4+0x112>
    128e:	2c c0       	rjmp	.+88     	; 0x12e8 <KEYPADeta32_adjust4x4+0x106>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	2e 30       	cpi	r18, 0x0E	; 14
    1296:	31 05       	cpc	r19, r1
    1298:	b1 f1       	breq	.+108    	; 0x1306 <KEYPADeta32_adjust4x4+0x124>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	8e 30       	cpi	r24, 0x0E	; 14
    12a0:	91 05       	cpc	r25, r1
    12a2:	74 f1       	brlt	.+92     	; 0x1300 <KEYPADeta32_adjust4x4+0x11e>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	2f 30       	cpi	r18, 0x0F	; 15
    12aa:	31 05       	cpc	r19, r1
    12ac:	79 f1       	breq	.+94     	; 0x130c <KEYPADeta32_adjust4x4+0x12a>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	80 31       	cpi	r24, 0x10	; 16
    12b4:	91 05       	cpc	r25, r1
    12b6:	69 f1       	breq	.+90     	; 0x1312 <KEYPADeta32_adjust4x4+0x130>
    12b8:	2f c0       	rjmp	.+94     	; 0x1318 <KEYPADeta32_adjust4x4+0x136>
	{
	case 1:
		pressedKey = '=';
    12ba:	8d e3       	ldi	r24, 0x3D	; 61
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	2e c0       	rjmp	.+92     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 2:
		pressedKey = 0;
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	2c c0       	rjmp	.+88     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 3:
		pressedKey = '%';
    12c4:	85 e2       	ldi	r24, 0x25	; 37
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	29 c0       	rjmp	.+82     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 4:
		pressedKey = '/';
    12ca:	8f e2       	ldi	r24, 0x2F	; 47
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	26 c0       	rjmp	.+76     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 5:
		pressedKey = 7;
    12d0:	87 e0       	ldi	r24, 0x07	; 7
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	23 c0       	rjmp	.+70     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 6:
		pressedKey = 8;
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	20 c0       	rjmp	.+64     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 7:
		pressedKey = 9;
    12dc:	89 e0       	ldi	r24, 0x09	; 9
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	1d c0       	rjmp	.+58     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 8:
		pressedKey = '*';
    12e2:	8a e2       	ldi	r24, 0x2A	; 42
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	1a c0       	rjmp	.+52     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 9:
		pressedKey = 4;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	17 c0       	rjmp	.+46     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 10:
		pressedKey = 5;
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 11:
		pressedKey = 6;
    12f4:	86 e0       	ldi	r24, 0x06	; 6
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 12:
		pressedKey = '-';
    12fa:	8d e2       	ldi	r24, 0x2D	; 45
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 13:
		pressedKey = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	0b c0       	rjmp	.+22     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 14:
		pressedKey = 2;
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	08 c0       	rjmp	.+16     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 15:
		pressedKey = 3;
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	05 c0       	rjmp	.+10     	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	case 16:
		pressedKey = '+';
    1312:	8b e2       	ldi	r24, 0x2B	; 43
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	02 c0       	rjmp	.+4      	; 0x131c <KEYPADeta32_adjust4x4+0x13a>
		break;
	default:
		pressedKey = number;
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	}
	return pressedKey;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <main>:
uint8 operand (void);
uint8 secondOperand (void);
uint8 process (const uint8 data1, const uint8 op, const uint8 data2);

int main (void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	62 97       	sbiw	r28, 0x12	; 18
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	uint8 data11 = 0 ;	//first operand
    1340:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 op1 = 0;		//operation variable
    1342:	19 8a       	std	Y+17, r1	; 0x11
	uint8 data22 = 0;	//second operand
    1344:	18 8a       	std	Y+16, r1	; 0x10
	sint8 result1 = 0;	//result after processing
    1346:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_init();			//LCD initialization
    1348:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_init>

	for(;;)
	{
		/*call first operand function and display*/
		data11  = firstOperand();
    134c:	0e 94 4e 0a 	call	0x149c	; 0x149c <firstOperand>
    1350:	8a 8b       	std	Y+18, r24	; 0x12
		/*get the function operation and display*/
		op1 	= operand();
    1352:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <operand>
    1356:	89 8b       	std	Y+17, r24	; 0x11
		/*get the second operand and display*/
		data22  = secondOperand();
    1358:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <secondOperand>
    135c:	88 8b       	std	Y+16, r24	; 0x10
		/*call the process function to get the result*/
		result1 = process(data11, op1, data22);
    135e:	8a 89       	ldd	r24, Y+18	; 0x12
    1360:	69 89       	ldd	r22, Y+17	; 0x11
    1362:	48 89       	ldd	r20, Y+16	; 0x10
    1364:	0e 94 85 0a 	call	0x150a	; 0x150a <process>
    1368:	8f 87       	std	Y+15, r24	; 0x0f

		/*if '=' key is pressed this means that to show the result*/
		if (KEYPAD_getPressedKey() == '=')
    136a:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    136e:	8d 33       	cpi	r24, 0x3D	; 61
    1370:	e1 f4       	brne	.+56     	; 0x13aa <main+0x7e>
		{
			/*set cursor location */
			LCD_setCursor(0, 4);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	64 e0       	ldi	r22, 0x04	; 4
    1376:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <LCD_setCursor>
			LCD_displayCharacter('=');
    137a:	8d e3       	ldi	r24, 0x3D	; 61
    137c:	0e 94 4d 13 	call	0x269a	; 0x269a <LCD_displayCharacter>
			LCD_setCursor(0, 6);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	66 e0       	ldi	r22, 0x06	; 6
    1384:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <LCD_setCursor>
			/*if there is an infinity operation as 0/4 = infinity*/
			if ((data22 == 0) && (op1 == '/'))
    1388:	88 89       	ldd	r24, Y+16	; 0x10
    138a:	88 23       	and	r24, r24
    138c:	41 f4       	brne	.+16     	; 0x139e <main+0x72>
    138e:	89 89       	ldd	r24, Y+17	; 0x11
    1390:	8f 32       	cpi	r24, 0x2F	; 47
    1392:	29 f4       	brne	.+10     	; 0x139e <main+0x72>
			{
				LCD_displayString("INFINITY...");
    1394:	80 e6       	ldi	r24, 0x60	; 96
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_displayString>
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <main+0x7e>
			}
			/*display the normal result if another choice*/
			else
			{
				/*display the result as needed*/
				LCD_intgerToString(result1);
    139e:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a0:	99 27       	eor	r25, r25
    13a2:	87 fd       	sbrc	r24, 7
    13a4:	90 95       	com	r25
    13a6:	0e 94 33 18 	call	0x3066	; 0x3066 <LCD_intgerToString>
			}
		}

		/*clear screen if another button is detected */
		if (KEYPAD_getPressedKey())
    13aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    13ae:	88 23       	and	r24, r24
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <main+0x8a>
		{
			LCD_clearScreen();
    13b2:	0e 94 56 18 	call	0x30ac	; 0x30ac <LCD_clearScreen>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e2       	ldi	r26, 0x20	; 32
    13bc:	b1 e4       	ldi	r27, 0x41	; 65
    13be:	8b 87       	std	Y+11, r24	; 0x0b
    13c0:	9c 87       	std	Y+12, r25	; 0x0c
    13c2:	ad 87       	std	Y+13, r26	; 0x0d
    13c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a e7       	ldi	r20, 0x7A	; 122
    13d4:	55 e4       	ldi	r21, 0x45	; 69
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8f 83       	std	Y+7, r24	; 0x07
    13e0:	98 87       	std	Y+8, r25	; 0x08
    13e2:	a9 87       	std	Y+9, r26	; 0x09
    13e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <main+0xdc>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <main+0x15a>
	else if (__tmp > 65535)
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6b 85       	ldd	r22, Y+11	; 0x0b
    1422:	7c 85       	ldd	r23, Y+12	; 0x0c
    1424:	8d 85       	ldd	r24, Y+13	; 0x0d
    1426:	9e 85       	ldd	r25, Y+14	; 0x0e
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <main+0x13c>
    144a:	80 e9       	ldi	r24, 0x90	; 144
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <main+0x12a>
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <main+0x11e>
    1470:	6d cf       	rjmp	.-294    	; 0x134c <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	6f 81       	ldd	r22, Y+7	; 0x07
    1474:	78 85       	ldd	r23, Y+8	; 0x08
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <main+0x166>
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	58 cf       	rjmp	.-336    	; 0x134c <main+0x20>

0000149c <firstOperand>:
}

/*Description:
 * function get the first operand and store it after returning to a main function */
uint8 firstOperand (void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	static uint8 opr1 = 0 ;
	opr1 = KEYPAD_getPressedKey();
    14a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    14a8:	80 93 74 00 	sts	0x0074, r24
	LCD_intgerToString(opr1);
    14ac:	80 91 74 00 	lds	r24, 0x0074
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 33 18 	call	0x3066	; 0x3066 <LCD_intgerToString>
	return opr1;
    14b8:	80 91 74 00 	lds	r24, 0x0074
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <operand>:

/*Description:
 * function get the operation and store it after returning to a main function */
uint8 operand (void)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	static uint8 op = 0;
	op = KEYPAD_getPressedKey();
    14ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    14ce:	80 93 75 00 	sts	0x0075, r24
	LCD_displayCharacter(op);
    14d2:	80 91 75 00 	lds	r24, 0x0075
    14d6:	0e 94 4d 13 	call	0x269a	; 0x269a <LCD_displayCharacter>
	return op;
    14da:	80 91 75 00 	lds	r24, 0x0075
}
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <secondOperand>:

/*Description:
 * function get the second operand and store it after returning to a main function */
uint8 secondOperand (void)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	static uint8 data2;
	data2 = KEYPAD_getPressedKey();
    14ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    14f0:	80 93 76 00 	sts	0x0076, r24
	LCD_intgerToString(data2);
    14f4:	80 91 76 00 	lds	r24, 0x0076
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 33 18 	call	0x3066	; 0x3066 <LCD_intgerToString>
	return data2;
    1500:	80 91 76 00 	lds	r24, 0x0076
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <process>:
 * Argument:
 * data1: first operand
 * op: the operation
 * data2: second operand  */
uint8 process (const uint8 data1, const uint8 op, const uint8 data2)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <process+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <process+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
    151c:	4b 83       	std	Y+3, r20	; 0x03
	/*static cause i want it keep its value through the program life time*/
	static uint8 result = 0;
	switch (op)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3d 83       	std	Y+5, r19	; 0x05
    1526:	2c 83       	std	Y+4, r18	; 0x04
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	8b 32       	cpi	r24, 0x2B	; 43
    152e:	91 05       	cpc	r25, r1
    1530:	d9 f0       	breq	.+54     	; 0x1568 <process+0x5e>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	2c 32       	cpi	r18, 0x2C	; 44
    1538:	31 05       	cpc	r19, r1
    153a:	5c f4       	brge	.+22     	; 0x1552 <process+0x48>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	85 32       	cpi	r24, 0x25	; 37
    1542:	91 05       	cpc	r25, r1
    1544:	69 f1       	breq	.+90     	; 0x15a0 <process+0x96>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	2a 32       	cpi	r18, 0x2A	; 42
    154c:	31 05       	cpc	r19, r1
    154e:	c1 f0       	breq	.+48     	; 0x1580 <process+0x76>
    1550:	2f c0       	rjmp	.+94     	; 0x15b0 <process+0xa6>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	8d 32       	cpi	r24, 0x2D	; 45
    1558:	91 05       	cpc	r25, r1
    155a:	61 f0       	breq	.+24     	; 0x1574 <process+0x6a>
    155c:	2c 81       	ldd	r18, Y+4	; 0x04
    155e:	3d 81       	ldd	r19, Y+5	; 0x05
    1560:	2f 32       	cpi	r18, 0x2F	; 47
    1562:	31 05       	cpc	r19, r1
    1564:	a9 f0       	breq	.+42     	; 0x1590 <process+0x86>
    1566:	24 c0       	rjmp	.+72     	; 0x15b0 <process+0xa6>
	{
	case '+': //if sum
		result = data1 + data2;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	89 0f       	add	r24, r25
    156e:	80 93 77 00 	sts	0x0077, r24
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <process+0xa6>
		break;
	case '-': //if subtraction
		result = data1 - data2;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	89 1b       	sub	r24, r25
    157a:	80 93 77 00 	sts	0x0077, r24
    157e:	18 c0       	rjmp	.+48     	; 0x15b0 <process+0xa6>
		break;
	case '*': //if multiplication
		result = data1 * data2;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	89 9f       	mul	r24, r25
    1586:	80 2d       	mov	r24, r0
    1588:	11 24       	eor	r1, r1
    158a:	80 93 77 00 	sts	0x0077, r24
    158e:	10 c0       	rjmp	.+32     	; 0x15b0 <process+0xa6>
		break;
	case '/': //if division
		result = data1 / data2;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	69 2f       	mov	r22, r25
    1596:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__udivmodqi4>
    159a:	80 93 77 00 	sts	0x0077, r24
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <process+0xa6>
		break;
	case '%': //if remainder
		result = data1 % data2;
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	69 2f       	mov	r22, r25
    15a6:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__udivmodqi4>
    15aa:	89 2f       	mov	r24, r25
    15ac:	80 93 77 00 	sts	0x0077, r24
		break;
	}
	return result;
    15b0:	80 91 77 00 	lds	r24, 0x0077
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <DIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void DIO_setupPinDirection(uint8 port_num, uint8 pin_num, DIO_PinDirectionType direction)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <DIO_setupPinDirection+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <DIO_setupPinDirection+0x8>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	6a 83       	std	Y+2, r22	; 0x02
    15d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 30       	cpi	r24, 0x08	; 8
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <DIO_setupPinDirection+0x1c>
    15de:	d5 c0       	rjmp	.+426    	; 0x178a <DIO_setupPinDirection+0x1c6>
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <DIO_setupPinDirection+0x24>
    15e6:	d1 c0       	rjmp	.+418    	; 0x178a <DIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3d 83       	std	Y+5, r19	; 0x05
    15f0:	2c 83       	std	Y+4, r18	; 0x04
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <DIO_setupPinDirection+0x3a>
    15fc:	43 c0       	rjmp	.+134    	; 0x1684 <DIO_setupPinDirection+0xc0>
    15fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1600:	3d 81       	ldd	r19, Y+5	; 0x05
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	2c f4       	brge	.+10     	; 0x1612 <DIO_setupPinDirection+0x4e>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	71 f0       	breq	.+28     	; 0x162c <DIO_setupPinDirection+0x68>
    1610:	bc c0       	rjmp	.+376    	; 0x178a <DIO_setupPinDirection+0x1c6>
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_setupPinDirection+0x5a>
    161c:	5f c0       	rjmp	.+190    	; 0x16dc <DIO_setupPinDirection+0x118>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_setupPinDirection+0x66>
    1628:	85 c0       	rjmp	.+266    	; 0x1734 <DIO_setupPinDirection+0x170>
    162a:	af c0       	rjmp	.+350    	; 0x178a <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	a1 f4       	brne	.+40     	; 0x165a <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1632:	aa e3       	ldi	r26, 0x3A	; 58
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_setupPinDirection+0x8c>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_setupPinDirection+0x88>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	98 c0       	rjmp	.+304    	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    165a:	aa e3       	ldi	r26, 0x3A	; 58
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ea e3       	ldi	r30, 0x3A	; 58
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_setupPinDirection+0xb4>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_setupPinDirection+0xb0>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	83 c0       	rjmp	.+262    	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	a1 f4       	brne	.+40     	; 0x16b2 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    168a:	a7 e3       	ldi	r26, 0x37	; 55
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_setupPinDirection+0xe4>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_setupPinDirection+0xe0>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	6c c0       	rjmp	.+216    	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16b2:	a7 e3       	ldi	r26, 0x37	; 55
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e7 e3       	ldi	r30, 0x37	; 55
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_setupPinDirection+0x10c>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_setupPinDirection+0x108>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	57 c0       	rjmp	.+174    	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	a1 f4       	brne	.+40     	; 0x170a <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16e2:	a4 e3       	ldi	r26, 0x34	; 52
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_setupPinDirection+0x13c>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_setupPinDirection+0x138>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	40 c0       	rjmp	.+128    	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    170a:	a4 e3       	ldi	r26, 0x34	; 52
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e4 e3       	ldi	r30, 0x34	; 52
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_setupPinDirection+0x164>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_setupPinDirection+0x160>
    172c:	80 95       	com	r24
    172e:	84 23       	and	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	2b c0       	rjmp	.+86     	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	a1 f4       	brne	.+40     	; 0x1762 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    173a:	a1 e3       	ldi	r26, 0x31	; 49
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e1 e3       	ldi	r30, 0x31	; 49
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_setupPinDirection+0x194>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_setupPinDirection+0x190>
    175c:	84 2b       	or	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	14 c0       	rjmp	.+40     	; 0x178a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1762:	a1 e3       	ldi	r26, 0x31	; 49
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_setupPinDirection+0x1bc>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_setupPinDirection+0x1b8>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <DIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void DIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_writePin+0x6>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_writePin+0x8>
    17a2:	0f 92       	push	r0
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	6a 83       	std	Y+2, r22	; 0x02
    17ac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 30       	cpi	r24, 0x08	; 8
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <DIO_writePin+0x1c>
    17b4:	d5 c0       	rjmp	.+426    	; 0x1960 <DIO_writePin+0x1c6>
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	08 f0       	brcs	.+2      	; 0x17be <DIO_writePin+0x24>
    17bc:	d1 c0       	rjmp	.+418    	; 0x1960 <DIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3d 83       	std	Y+5, r19	; 0x05
    17c6:	2c 83       	std	Y+4, r18	; 0x04
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <DIO_writePin+0x3a>
    17d2:	43 c0       	rjmp	.+134    	; 0x185a <DIO_writePin+0xc0>
    17d4:	2c 81       	ldd	r18, Y+4	; 0x04
    17d6:	3d 81       	ldd	r19, Y+5	; 0x05
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <DIO_writePin+0x4e>
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	71 f0       	breq	.+28     	; 0x1802 <DIO_writePin+0x68>
    17e6:	bc c0       	rjmp	.+376    	; 0x1960 <DIO_writePin+0x1c6>
    17e8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <DIO_writePin+0x5a>
    17f2:	5f c0       	rjmp	.+190    	; 0x18b2 <DIO_writePin+0x118>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <DIO_writePin+0x66>
    17fe:	85 c0       	rjmp	.+266    	; 0x190a <DIO_writePin+0x170>
    1800:	af c0       	rjmp	.+350    	; 0x1960 <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	a1 f4       	brne	.+40     	; 0x1830 <DIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1808:	ab e3       	ldi	r26, 0x3B	; 59
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_writePin+0x8c>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_writePin+0x88>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	98 c0       	rjmp	.+304    	; 0x1960 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1830:	ab e3       	ldi	r26, 0x3B	; 59
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	eb e3       	ldi	r30, 0x3B	; 59
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_writePin+0xb4>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_writePin+0xb0>
    1852:	80 95       	com	r24
    1854:	84 23       	and	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	83 c0       	rjmp	.+262    	; 0x1960 <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	a1 f4       	brne	.+40     	; 0x1888 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1860:	a8 e3       	ldi	r26, 0x38	; 56
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e8 e3       	ldi	r30, 0x38	; 56
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_writePin+0xe4>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_writePin+0xe0>
    1882:	84 2b       	or	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	6c c0       	rjmp	.+216    	; 0x1960 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1888:	a8 e3       	ldi	r26, 0x38	; 56
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 e3       	ldi	r30, 0x38	; 56
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_writePin+0x10c>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_writePin+0x108>
    18aa:	80 95       	com	r24
    18ac:	84 23       	and	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	57 c0       	rjmp	.+174    	; 0x1960 <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	a1 f4       	brne	.+40     	; 0x18e0 <DIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18b8:	a5 e3       	ldi	r26, 0x35	; 53
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e3       	ldi	r30, 0x35	; 53
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_writePin+0x13c>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_writePin+0x138>
    18da:	84 2b       	or	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	40 c0       	rjmp	.+128    	; 0x1960 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18e0:	a5 e3       	ldi	r26, 0x35	; 53
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_writePin+0x164>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_writePin+0x160>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	2b c0       	rjmp	.+86     	; 0x1960 <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	a1 f4       	brne	.+40     	; 0x1938 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_writePin+0x194>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_writePin+0x190>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1938:	a2 e3       	ldi	r26, 0x32	; 50
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e2 e3       	ldi	r30, 0x32	; 50
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_writePin+0x1bc>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_writePin+0x1b8>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <DIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 DIO_readPin(uint8 port_num, uint8 pin_num)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <DIO_readPin+0x6>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <DIO_readPin+0x8>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1982:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	88 30       	cpi	r24, 0x08	; 8
    1988:	08 f0       	brcs	.+2      	; 0x198c <DIO_readPin+0x1c>
    198a:	84 c0       	rjmp	.+264    	; 0x1a94 <DIO_readPin+0x124>
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	08 f0       	brcs	.+2      	; 0x1994 <DIO_readPin+0x24>
    1992:	80 c0       	rjmp	.+256    	; 0x1a94 <DIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3d 83       	std	Y+5, r19	; 0x05
    199c:	2c 83       	std	Y+4, r18	; 0x04
    199e:	4c 81       	ldd	r20, Y+4	; 0x04
    19a0:	5d 81       	ldd	r21, Y+5	; 0x05
    19a2:	41 30       	cpi	r20, 0x01	; 1
    19a4:	51 05       	cpc	r21, r1
    19a6:	79 f1       	breq	.+94     	; 0x1a06 <DIO_readPin+0x96>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	82 30       	cpi	r24, 0x02	; 2
    19ae:	91 05       	cpc	r25, r1
    19b0:	34 f4       	brge	.+12     	; 0x19be <DIO_readPin+0x4e>
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	21 15       	cp	r18, r1
    19b8:	31 05       	cpc	r19, r1
    19ba:	69 f0       	breq	.+26     	; 0x19d6 <DIO_readPin+0x66>
    19bc:	6b c0       	rjmp	.+214    	; 0x1a94 <DIO_readPin+0x124>
    19be:	4c 81       	ldd	r20, Y+4	; 0x04
    19c0:	5d 81       	ldd	r21, Y+5	; 0x05
    19c2:	42 30       	cpi	r20, 0x02	; 2
    19c4:	51 05       	cpc	r21, r1
    19c6:	b9 f1       	breq	.+110    	; 0x1a36 <DIO_readPin+0xc6>
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	91 05       	cpc	r25, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <DIO_readPin+0x64>
    19d2:	49 c0       	rjmp	.+146    	; 0x1a66 <DIO_readPin+0xf6>
    19d4:	5f c0       	rjmp	.+190    	; 0x1a94 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19d6:	e9 e3       	ldi	r30, 0x39	; 57
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a9 01       	movw	r20, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_readPin+0x7e>
    19ea:	55 95       	asr	r21
    19ec:	47 95       	ror	r20
    19ee:	8a 95       	dec	r24
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_readPin+0x7a>
    19f2:	ca 01       	movw	r24, r20
    19f4:	81 70       	andi	r24, 0x01	; 1
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	88 23       	and	r24, r24
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	49 c0       	rjmp	.+146    	; 0x1a94 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a02:	19 82       	std	Y+1, r1	; 0x01
    1a04:	47 c0       	rjmp	.+142    	; 0x1a94 <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a06:	e6 e3       	ldi	r30, 0x36	; 54
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_readPin+0xae>
    1a1a:	55 95       	asr	r21
    1a1c:	47 95       	ror	r20
    1a1e:	8a 95       	dec	r24
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_readPin+0xaa>
    1a22:	ca 01       	movw	r24, r20
    1a24:	81 70       	andi	r24, 0x01	; 1
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	88 23       	and	r24, r24
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	31 c0       	rjmp	.+98     	; 0x1a94 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a32:	19 82       	std	Y+1, r1	; 0x01
    1a34:	2f c0       	rjmp	.+94     	; 0x1a94 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a36:	e3 e3       	ldi	r30, 0x33	; 51
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_readPin+0xde>
    1a4a:	55 95       	asr	r21
    1a4c:	47 95       	ror	r20
    1a4e:	8a 95       	dec	r24
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_readPin+0xda>
    1a52:	ca 01       	movw	r24, r20
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	88 23       	and	r24, r24
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	19 c0       	rjmp	.+50     	; 0x1a94 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a62:	19 82       	std	Y+1, r1	; 0x01
    1a64:	17 c0       	rjmp	.+46     	; 0x1a94 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a66:	e0 e3       	ldi	r30, 0x30	; 48
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a9 01       	movw	r20, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_readPin+0x10e>
    1a7a:	55 95       	asr	r21
    1a7c:	47 95       	ror	r20
    1a7e:	8a 95       	dec	r24
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_readPin+0x10a>
    1a82:	ca 01       	movw	r24, r20
    1a84:	81 70       	andi	r24, 0x01	; 1
    1a86:	90 70       	andi	r25, 0x00	; 0
    1a88:	88 23       	and	r24, r24
    1a8a:	19 f0       	breq	.+6      	; 0x1a92 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a92:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <DIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_setupPortDirection(uint8 port_num, DIO_PortDirectionType direction)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <DIO_setupPortDirection+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <DIO_setupPortDirection+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	90 f5       	brcc	.+100    	; 0x1b20 <DIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3c 83       	std	Y+4, r19	; 0x04
    1ac4:	2b 83       	std	Y+3, r18	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	d1 f0       	breq	.+52     	; 0x1b04 <DIO_setupPortDirection+0x5e>
    1ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <DIO_setupPortDirection+0x3e>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <DIO_setupPortDirection+0x54>
    1ae2:	1e c0       	rjmp	.+60     	; 0x1b20 <DIO_setupPortDirection+0x7a>
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	81 f0       	breq	.+32     	; 0x1b0e <DIO_setupPortDirection+0x68>
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	81 f0       	breq	.+32     	; 0x1b18 <DIO_setupPortDirection+0x72>
    1af8:	13 c0       	rjmp	.+38     	; 0x1b20 <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1afa:	ea e3       	ldi	r30, 0x3A	; 58
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	80 83       	st	Z, r24
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	80 83       	st	Z, r24
    1b0c:	09 c0       	rjmp	.+18     	; 0x1b20 <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b0e:	e4 e3       	ldi	r30, 0x34	; 52
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b18:	e1 e3       	ldi	r30, 0x31	; 49
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_num, uint8 value)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <DIO_writePort+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <DIO_writePort+0x8>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	84 30       	cpi	r24, 0x04	; 4
    1b42:	90 f5       	brcc	.+100    	; 0x1ba8 <DIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3c 83       	std	Y+4, r19	; 0x04
    1b4c:	2b 83       	std	Y+3, r18	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	91 05       	cpc	r25, r1
    1b56:	d1 f0       	breq	.+52     	; 0x1b8c <DIO_writePort+0x5e>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <DIO_writePort+0x3e>
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <DIO_writePort+0x54>
    1b6a:	1e c0       	rjmp	.+60     	; 0x1ba8 <DIO_writePort+0x7a>
    1b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	81 f0       	breq	.+32     	; 0x1b96 <DIO_writePort+0x68>
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	83 30       	cpi	r24, 0x03	; 3
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <DIO_writePort+0x72>
    1b80:	13 c0       	rjmp	.+38     	; 0x1ba8 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b82:	eb e3       	ldi	r30, 0x3B	; 59
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	80 83       	st	Z, r24
    1b8a:	0e c0       	rjmp	.+28     	; 0x1ba8 <DIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b8c:	e8 e3       	ldi	r30, 0x38	; 56
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	80 83       	st	Z, r24
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <DIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b96:	e5 e3       	ldi	r30, 0x35	; 53
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	80 83       	st	Z, r24
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <DIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ba0:	e2 e3       	ldi	r30, 0x32	; 50
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_num)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <DIO_readPort+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <DIO_readPort+0x8>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bc4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	90 f5       	brcc	.+100    	; 0x1c30 <DIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3c 83       	std	Y+4, r19	; 0x04
    1bd4:	2b 83       	std	Y+3, r18	; 0x03
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	d1 f0       	breq	.+52     	; 0x1c14 <DIO_readPort+0x5e>
    1be0:	2b 81       	ldd	r18, Y+3	; 0x03
    1be2:	3c 81       	ldd	r19, Y+4	; 0x04
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <DIO_readPort+0x3e>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <DIO_readPort+0x54>
    1bf2:	1e c0       	rjmp	.+60     	; 0x1c30 <DIO_readPort+0x7a>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	81 f0       	breq	.+32     	; 0x1c1e <DIO_readPort+0x68>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	91 05       	cpc	r25, r1
    1c06:	81 f0       	breq	.+32     	; 0x1c28 <DIO_readPort+0x72>
    1c08:	13 c0       	rjmp	.+38     	; 0x1c30 <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c0a:	e9 e3       	ldi	r30, 0x39	; 57
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <DIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c14:	e6 e3       	ldi	r30, 0x36	; 54
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <DIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c1e:	e3 e3       	ldi	r30, 0x33	; 51
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <DIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <LCD_init>:
#include "dio.h"
#include "common_macros.h"
#include "lcd.h"

void LCD_init (void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	2e 97       	sbiw	r28, 0x0e	; 14
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
	DIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	63 e0       	ldi	r22, 0x03	; 3
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID, PIN_OUTPUT);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	62 e0       	ldi	r22, 0x02	; 2
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6e:	b1 e4       	ldi	r27, 0x41	; 65
    1c70:	8b 87       	std	Y+11, r24	; 0x0b
    1c72:	9c 87       	std	Y+12, r25	; 0x0c
    1c74:	ad 87       	std	Y+13, r26	; 0x0d
    1c76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a e7       	ldi	r20, 0x7A	; 122
    1c86:	55 e4       	ldi	r21, 0x45	; 69
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8f 83       	std	Y+7, r24	; 0x07
    1c92:	98 87       	std	Y+8, r25	; 0x08
    1c94:	a9 87       	std	Y+9, r26	; 0x09
    1c96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_init+0x7a>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_init+0xda>
    1cfc:	80 e9       	ldi	r24, 0x90	; 144
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_init+0xc8>
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_init+0xbc>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_init+0x104>
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

#if (LCD_DATA_BITS_MODE == 8)
	DIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_writeCommmand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#elif (LCD_DATA_BITS_MODE == 4)
	DIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_D4_ID, PIN_OUTPUT);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_D5_ID, PIN_OUTPUT);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_D6_ID, PIN_OUTPUT);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_D7_ID, PIN_OUTPUT);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DIO_setupPinDirection>

	LCD_writeCommmand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1d74:	83 e3       	ldi	r24, 0x33	; 51
    1d76:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>
	LCD_writeCommmand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1d7a:	82 e3       	ldi	r24, 0x32	; 50
    1d7c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>

	LCD_writeCommmand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1d80:	88 e2       	ldi	r24, 0x28	; 40
    1d82:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>
#endif


	LCD_writeCommmand(LCD_CURSOR_OFF);
    1d86:	8c e0       	ldi	r24, 0x0C	; 12
    1d88:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>
	LCD_writeCommmand(LCD_GO_TO_HOME);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>

}
    1d92:	2e 96       	adiw	r28, 0x0e	; 14
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <LCD_writeCommmand>:

void LCD_writeCommmand (uint8 command)
{
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	c3 56       	subi	r28, 0x63	; 99
    1db2:	d0 40       	sbci	r29, 0x00	; 0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 59       	subi	r30, 0x9D	; 157
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24
	DIO_writePin (LCD_RS_PORT_ID,LCD_RS_PIN_ID, LOGIC_LOW);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	63 e0       	ldi	r22, 0x03	; 3
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e1 5a       	subi	r30, 0xA1	; 161
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e8       	ldi	r26, 0x80	; 128
    1ddc:	bf e3       	ldi	r27, 0x3F	; 63
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	8e 01       	movw	r16, r28
    1de8:	05 5a       	subi	r16, 0xA5	; 165
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	fe 01       	movw	r30, r28
    1dee:	e1 5a       	subi	r30, 0xA1	; 161
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4a e7       	ldi	r20, 0x7A	; 122
    1e00:	55 e4       	ldi	r21, 0x45	; 69
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e5 5a       	subi	r30, 0xA5	; 165
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	44 f4       	brge	.+16     	; 0x1e42 <LCD_writeCommmand+0x9e>
		__ticks = 1;
    1e32:	fe 01       	movw	r30, r28
    1e34:	e7 5a       	subi	r30, 0xA7	; 167
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	64 c0       	rjmp	.+200    	; 0x1f0a <LCD_writeCommmand+0x166>
	else if (__tmp > 65535)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e5 5a       	subi	r30, 0xA5	; 165
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <LCD_writeCommmand+0xbe>
    1e60:	43 c0       	rjmp	.+134    	; 0x1ee8 <LCD_writeCommmand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	fe 01       	movw	r30, r28
    1e64:	e1 5a       	subi	r30, 0xA1	; 161
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8e 01       	movw	r16, r28
    1e82:	07 5a       	subi	r16, 0xA7	; 167
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	1f c0       	rjmp	.+62     	; 0x1ed8 <LCD_writeCommmand+0x134>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e9 5a       	subi	r30, 0xA9	; 169
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 e9       	ldi	r24, 0x90	; 144
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e9 5a       	subi	r30, 0xA9	; 169
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_writeCommmand+0x10e>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e9 5a       	subi	r30, 0xA9	; 169
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	de 01       	movw	r26, r28
    1ec2:	a7 5a       	subi	r26, 0xA7	; 167
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e7 5a       	subi	r30, 0xA7	; 167
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	9c 93       	st	X, r25
    1ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e7 5a       	subi	r30, 0xA7	; 167
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	d1 f6       	brne	.-76     	; 0x1e9a <LCD_writeCommmand+0xf6>
    1ee6:	27 c0       	rjmp	.+78     	; 0x1f36 <LCD_writeCommmand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	8e 01       	movw	r16, r28
    1eea:	07 5a       	subi	r16, 0xA7	; 167
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e5 5a       	subi	r30, 0xA5	; 165
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	de 01       	movw	r26, r28
    1f0c:	ab 5a       	subi	r26, 0xAB	; 171
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e7 5a       	subi	r30, 0xA7	; 167
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	8d 93       	st	X+, r24
    1f1c:	9c 93       	st	X, r25
    1f1e:	fe 01       	movw	r30, r28
    1f20:	eb 5a       	subi	r30, 0xAB	; 171
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_writeCommmand+0x184>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	eb 5a       	subi	r30, 0xAB	; 171
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin (LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    1f40:	fe 01       	movw	r30, r28
    1f42:	ef 5a       	subi	r30, 0xAF	; 175
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e8       	ldi	r26, 0x80	; 128
    1f4c:	bf e3       	ldi	r27, 0x3F	; 63
    1f4e:	80 83       	st	Z, r24
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	8e 01       	movw	r16, r28
    1f58:	03 5b       	subi	r16, 0xB3	; 179
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ef 5a       	subi	r30, 0xAF	; 175
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	a2 83       	std	Z+2, r26	; 0x02
    1f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f84:	fe 01       	movw	r30, r28
    1f86:	e3 5b       	subi	r30, 0xB3	; 179
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	44 f4       	brge	.+16     	; 0x1fb2 <LCD_writeCommmand+0x20e>
		__ticks = 1;
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e5 5b       	subi	r30, 0xB5	; 181
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	64 c0       	rjmp	.+200    	; 0x207a <LCD_writeCommmand+0x2d6>
	else if (__tmp > 65535)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e3 5b       	subi	r30, 0xB3	; 179
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	0c f0       	brlt	.+2      	; 0x1fd2 <LCD_writeCommmand+0x22e>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <LCD_writeCommmand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ef 5a       	subi	r30, 0xAF	; 175
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8e 01       	movw	r16, r28
    1ff2:	05 5b       	subi	r16, 0xB5	; 181
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	1f c0       	rjmp	.+62     	; 0x2048 <LCD_writeCommmand+0x2a4>
    200a:	fe 01       	movw	r30, r28
    200c:	e7 5b       	subi	r30, 0xB7	; 183
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	fe 01       	movw	r30, r28
    201a:	e7 5b       	subi	r30, 0xB7	; 183
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_writeCommmand+0x27e>
    2026:	fe 01       	movw	r30, r28
    2028:	e7 5b       	subi	r30, 0xB7	; 183
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	de 01       	movw	r26, r28
    2032:	a5 5b       	subi	r26, 0xB5	; 181
    2034:	bf 4f       	sbci	r27, 0xFF	; 255
    2036:	fe 01       	movw	r30, r28
    2038:	e5 5b       	subi	r30, 0xB5	; 181
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	9c 93       	st	X, r25
    2046:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	fe 01       	movw	r30, r28
    204a:	e5 5b       	subi	r30, 0xB5	; 181
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	d1 f6       	brne	.-76     	; 0x200a <LCD_writeCommmand+0x266>
    2056:	27 c0       	rjmp	.+78     	; 0x20a6 <LCD_writeCommmand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	8e 01       	movw	r16, r28
    205a:	05 5b       	subi	r16, 0xB5	; 181
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e3 5b       	subi	r30, 0xB3	; 179
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	de 01       	movw	r26, r28
    207c:	a9 5b       	subi	r26, 0xB9	; 185
    207e:	bf 4f       	sbci	r27, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	e5 5b       	subi	r30, 0xB5	; 181
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	8d 93       	st	X+, r24
    208c:	9c 93       	st	X, r25
    208e:	fe 01       	movw	r30, r28
    2090:	e9 5b       	subi	r30, 0xB9	; 185
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_writeCommmand+0x2f4>
    209c:	fe 01       	movw	r30, r28
    209e:	e9 5b       	subi	r30, 0xB9	; 185
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D4_ID, GET_BIT(command,4));
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 59       	subi	r30, 0x9D	; 157
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	80 71       	andi	r24, 0x10	; 16
    20b4:	90 70       	andi	r25, 0x00	; 0
    20b6:	95 95       	asr	r25
    20b8:	87 95       	ror	r24
    20ba:	95 95       	asr	r25
    20bc:	87 95       	ror	r24
    20be:	95 95       	asr	r25
    20c0:	87 95       	ror	r24
    20c2:	95 95       	asr	r25
    20c4:	87 95       	ror	r24
    20c6:	98 2f       	mov	r25, r24
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D5_ID, GET_BIT(command,5));
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 59       	subi	r30, 0x9D	; 157
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	80 72       	andi	r24, 0x20	; 32
    20e0:	90 70       	andi	r25, 0x00	; 0
    20e2:	95 95       	asr	r25
    20e4:	87 95       	ror	r24
    20e6:	95 95       	asr	r25
    20e8:	87 95       	ror	r24
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	95 95       	asr	r25
    20f0:	87 95       	ror	r24
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	98 2f       	mov	r25, r24
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	49 2f       	mov	r20, r25
    20fe:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D6_ID, GET_BIT(command,6));
    2102:	fe 01       	movw	r30, r28
    2104:	ed 59       	subi	r30, 0x9D	; 157
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	80 74       	andi	r24, 0x40	; 64
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	08 2e       	mov	r0, r24
    2114:	89 2f       	mov	r24, r25
    2116:	00 0c       	add	r0, r0
    2118:	88 1f       	adc	r24, r24
    211a:	99 0b       	sbc	r25, r25
    211c:	00 0c       	add	r0, r0
    211e:	88 1f       	adc	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	98 2f       	mov	r25, r24
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	62 e0       	ldi	r22, 0x02	; 2
    2128:	49 2f       	mov	r20, r25
    212a:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D7_ID, GET_BIT(command,7));
    212e:	fe 01       	movw	r30, r28
    2130:	ed 59       	subi	r30, 0x9D	; 157
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	98 2f       	mov	r25, r24
    2138:	99 1f       	adc	r25, r25
    213a:	99 27       	eor	r25, r25
    213c:	99 1f       	adc	r25, r25
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	64 e0       	ldi	r22, 0x04	; 4
    2142:	49 2f       	mov	r20, r25
    2144:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2148:	fe 01       	movw	r30, r28
    214a:	ed 5b       	subi	r30, 0xBD	; 189
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e8       	ldi	r26, 0x80	; 128
    2154:	bf e3       	ldi	r27, 0x3F	; 63
    2156:	80 83       	st	Z, r24
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	a2 83       	std	Z+2, r26	; 0x02
    215c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215e:	8e 01       	movw	r16, r28
    2160:	01 5c       	subi	r16, 0xC1	; 193
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	fe 01       	movw	r30, r28
    2166:	ed 5b       	subi	r30, 0xBD	; 189
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a e7       	ldi	r20, 0x7A	; 122
    2178:	55 e4       	ldi	r21, 0x45	; 69
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	f8 01       	movw	r30, r16
    2184:	80 83       	st	Z, r24
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	a2 83       	std	Z+2, r26	; 0x02
    218a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    218c:	fe 01       	movw	r30, r28
    218e:	ff 96       	adiw	r30, 0x3f	; 63
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_writeCommmand+0x40e>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9e af       	std	Y+62, r25	; 0x3e
    21ae:	8d af       	std	Y+61, r24	; 0x3d
    21b0:	46 c0       	rjmp	.+140    	; 0x223e <LCD_writeCommmand+0x49a>
	else if (__tmp > 65535)
    21b2:	fe 01       	movw	r30, r28
    21b4:	ff 96       	adiw	r30, 0x3f	; 63
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	64 f5       	brge	.+88     	; 0x2226 <LCD_writeCommmand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	fe 01       	movw	r30, r28
    21d0:	ed 5b       	subi	r30, 0xBD	; 189
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e af       	std	Y+62, r25	; 0x3e
    21fa:	8d af       	std	Y+61, r24	; 0x3d
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <LCD_writeCommmand+0x478>
    21fe:	80 e9       	ldi	r24, 0x90	; 144
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	9c af       	std	Y+60, r25	; 0x3c
    2204:	8b af       	std	Y+59, r24	; 0x3b
    2206:	8b ad       	ldd	r24, Y+59	; 0x3b
    2208:	9c ad       	ldd	r25, Y+60	; 0x3c
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_writeCommmand+0x466>
    220e:	9c af       	std	Y+60, r25	; 0x3c
    2210:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8d ad       	ldd	r24, Y+61	; 0x3d
    2214:	9e ad       	ldd	r25, Y+62	; 0x3e
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9e af       	std	Y+62, r25	; 0x3e
    221a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8d ad       	ldd	r24, Y+61	; 0x3d
    221e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <LCD_writeCommmand+0x45a>
    2224:	16 c0       	rjmp	.+44     	; 0x2252 <LCD_writeCommmand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	fe 01       	movw	r30, r28
    2228:	ff 96       	adiw	r30, 0x3f	; 63
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e af       	std	Y+62, r25	; 0x3e
    223c:	8d af       	std	Y+61, r24	; 0x3d
    223e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2240:	9e ad       	ldd	r25, Y+62	; 0x3e
    2242:	9a af       	std	Y+58, r25	; 0x3a
    2244:	89 af       	std	Y+57, r24	; 0x39
    2246:	89 ad       	ldd	r24, Y+57	; 0x39
    2248:	9a ad       	ldd	r25, Y+58	; 0x3a
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_writeCommmand+0x4a6>
    224e:	9a af       	std	Y+58, r25	; 0x3a
    2250:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8d ab       	std	Y+53, r24	; 0x35
    2266:	9e ab       	std	Y+54, r25	; 0x36
    2268:	af ab       	std	Y+55, r26	; 0x37
    226a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6d a9       	ldd	r22, Y+53	; 0x35
    226e:	7e a9       	ldd	r23, Y+54	; 0x36
    2270:	8f a9       	ldd	r24, Y+55	; 0x37
    2272:	98 ad       	ldd	r25, Y+56	; 0x38
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	55 e4       	ldi	r21, 0x45	; 69
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	89 ab       	std	Y+49, r24	; 0x31
    2286:	9a ab       	std	Y+50, r25	; 0x32
    2288:	ab ab       	std	Y+51, r26	; 0x33
    228a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_writeCommmand+0x50a>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 ab       	std	Y+48, r25	; 0x30
    22aa:	8f a7       	std	Y+47, r24	; 0x2f
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_writeCommmand+0x588>
	else if (__tmp > 65535)
    22ae:	69 a9       	ldd	r22, Y+49	; 0x31
    22b0:	7a a9       	ldd	r23, Y+50	; 0x32
    22b2:	8b a9       	ldd	r24, Y+51	; 0x33
    22b4:	9c a9       	ldd	r25, Y+52	; 0x34
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_writeCommmand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6d a9       	ldd	r22, Y+53	; 0x35
    22c8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ca:	8f a9       	ldd	r24, Y+55	; 0x37
    22cc:	98 ad       	ldd	r25, Y+56	; 0x38
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_writeCommmand+0x56a>
    22f0:	80 e9       	ldi	r24, 0x90	; 144
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_writeCommmand+0x558>
    2300:	9e a7       	std	Y+46, r25	; 0x2e
    2302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	98 ab       	std	Y+48, r25	; 0x30
    230c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_writeCommmand+0x54c>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_writeCommmand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	8f a5       	ldd	r24, Y+47	; 0x2f
    232e:	98 a9       	ldd	r25, Y+48	; 0x30
    2330:	9c a7       	std	Y+44, r25	; 0x2c
    2332:	8b a7       	std	Y+43, r24	; 0x2b
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_writeCommmand+0x594>
    233c:	9c a7       	std	Y+44, r25	; 0x2c
    233e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	62 e0       	ldi	r22, 0x02	; 2
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8f a3       	std	Y+39, r24	; 0x27
    2354:	98 a7       	std	Y+40, r25	; 0x28
    2356:	a9 a7       	std	Y+41, r26	; 0x29
    2358:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6f a1       	ldd	r22, Y+39	; 0x27
    235c:	78 a5       	ldd	r23, Y+40	; 0x28
    235e:	89 a5       	ldd	r24, Y+41	; 0x29
    2360:	9a a5       	ldd	r25, Y+42	; 0x2a
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8b a3       	std	Y+35, r24	; 0x23
    2374:	9c a3       	std	Y+36, r25	; 0x24
    2376:	ad a3       	std	Y+37, r26	; 0x25
    2378:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_writeCommmand+0x5f8>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9a a3       	std	Y+34, r25	; 0x22
    2398:	89 a3       	std	Y+33, r24	; 0x21
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_writeCommmand+0x676>
	else if (__tmp > 65535)
    239c:	6b a1       	ldd	r22, Y+35	; 0x23
    239e:	7c a1       	ldd	r23, Y+36	; 0x24
    23a0:	8d a1       	ldd	r24, Y+37	; 0x25
    23a2:	9e a1       	ldd	r25, Y+38	; 0x26
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_writeCommmand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6f a1       	ldd	r22, Y+39	; 0x27
    23b6:	78 a5       	ldd	r23, Y+40	; 0x28
    23b8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9a a3       	std	Y+34, r25	; 0x22
    23da:	89 a3       	std	Y+33, r24	; 0x21
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_writeCommmand+0x658>
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	98 a3       	std	Y+32, r25	; 0x20
    23e4:	8f 8f       	std	Y+31, r24	; 0x1f
    23e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e8:	98 a1       	ldd	r25, Y+32	; 0x20
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_writeCommmand+0x646>
    23ee:	98 a3       	std	Y+32, r25	; 0x20
    23f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9a a3       	std	Y+34, r25	; 0x22
    23fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	89 a1       	ldd	r24, Y+33	; 0x21
    23fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_writeCommmand+0x63a>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_writeCommmand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6b a1       	ldd	r22, Y+35	; 0x23
    2408:	7c a1       	ldd	r23, Y+36	; 0x24
    240a:	8d a1       	ldd	r24, Y+37	; 0x25
    240c:	9e a1       	ldd	r25, Y+38	; 0x26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	9a a1       	ldd	r25, Y+34	; 0x22
    241e:	9e 8f       	std	Y+30, r25	; 0x1e
    2420:	8d 8f       	std	Y+29, r24	; 0x1d
    2422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_writeCommmand+0x682>
    242a:	9e 8f       	std	Y+30, r25	; 0x1e
    242c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writePin(LCD_DATA_PORT_ID,LCD_D4_ID,GET_BIT(command,0));
    242e:	fe 01       	movw	r30, r28
    2430:	ed 59       	subi	r30, 0x9D	; 157
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	98 2f       	mov	r25, r24
    2438:	91 70       	andi	r25, 0x01	; 1
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	49 2f       	mov	r20, r25
    2440:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D5_ID,GET_BIT(command,1));
    2444:	fe 01       	movw	r30, r28
    2446:	ed 59       	subi	r30, 0x9D	; 157
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	82 70       	andi	r24, 0x02	; 2
    2452:	90 70       	andi	r25, 0x00	; 0
    2454:	95 95       	asr	r25
    2456:	87 95       	ror	r24
    2458:	98 2f       	mov	r25, r24
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	49 2f       	mov	r20, r25
    2460:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D6_ID,GET_BIT(command,2));
    2464:	fe 01       	movw	r30, r28
    2466:	ed 59       	subi	r30, 0x9D	; 157
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	84 70       	andi	r24, 0x04	; 4
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	95 95       	asr	r25
    2476:	87 95       	ror	r24
    2478:	95 95       	asr	r25
    247a:	87 95       	ror	r24
    247c:	98 2f       	mov	r25, r24
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	49 2f       	mov	r20, r25
    2484:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D7_ID,GET_BIT(command,3));
    2488:	fe 01       	movw	r30, r28
    248a:	ed 59       	subi	r30, 0x9D	; 157
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	88 70       	andi	r24, 0x08	; 8
    2496:	90 70       	andi	r25, 0x00	; 0
    2498:	95 95       	asr	r25
    249a:	87 95       	ror	r24
    249c:	95 95       	asr	r25
    249e:	87 95       	ror	r24
    24a0:	95 95       	asr	r25
    24a2:	87 95       	ror	r24
    24a4:	98 2f       	mov	r25, r24
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	64 e0       	ldi	r22, 0x04	; 4
    24aa:	49 2f       	mov	r20, r25
    24ac:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e8       	ldi	r26, 0x80	; 128
    24b6:	bf e3       	ldi	r27, 0x3F	; 63
    24b8:	89 8f       	std	Y+25, r24	; 0x19
    24ba:	9a 8f       	std	Y+26, r25	; 0x1a
    24bc:	ab 8f       	std	Y+27, r26	; 0x1b
    24be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	69 8d       	ldd	r22, Y+25	; 0x19
    24c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	55 e4       	ldi	r21, 0x45	; 69
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8d 8b       	std	Y+21, r24	; 0x15
    24da:	9e 8b       	std	Y+22, r25	; 0x16
    24dc:	af 8b       	std	Y+23, r26	; 0x17
    24de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_writeCommmand+0x75e>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9c 8b       	std	Y+20, r25	; 0x14
    24fe:	8b 8b       	std	Y+19, r24	; 0x13
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <LCD_writeCommmand+0x7dc>
	else if (__tmp > 65535)
    2502:	6d 89       	ldd	r22, Y+21	; 0x15
    2504:	7e 89       	ldd	r23, Y+22	; 0x16
    2506:	8f 89       	ldd	r24, Y+23	; 0x17
    2508:	98 8d       	ldd	r25, Y+24	; 0x18
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <LCD_writeCommmand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	69 8d       	ldd	r22, Y+25	; 0x19
    251c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9c 8b       	std	Y+20, r25	; 0x14
    2540:	8b 8b       	std	Y+19, r24	; 0x13
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <LCD_writeCommmand+0x7be>
    2544:	80 e9       	ldi	r24, 0x90	; 144
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	9a 8b       	std	Y+18, r25	; 0x12
    254a:	89 8b       	std	Y+17, r24	; 0x11
    254c:	89 89       	ldd	r24, Y+17	; 0x11
    254e:	9a 89       	ldd	r25, Y+18	; 0x12
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_writeCommmand+0x7ac>
    2554:	9a 8b       	std	Y+18, r25	; 0x12
    2556:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8b 89       	ldd	r24, Y+19	; 0x13
    255a:	9c 89       	ldd	r25, Y+20	; 0x14
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <LCD_writeCommmand+0x7a0>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <LCD_writeCommmand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6d 89       	ldd	r22, Y+21	; 0x15
    256e:	7e 89       	ldd	r23, Y+22	; 0x16
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	98 8d       	ldd	r25, Y+24	; 0x18
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9c 8b       	std	Y+20, r25	; 0x14
    257e:	8b 8b       	std	Y+19, r24	; 0x13
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	98 8b       	std	Y+16, r25	; 0x10
    2586:	8f 87       	std	Y+15, r24	; 0x0f
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	98 89       	ldd	r25, Y+16	; 0x10
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_writeCommmand+0x7e8>
    2590:	98 8b       	std	Y+16, r25	; 0x10
    2592:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	8b 87       	std	Y+11, r24	; 0x0b
    25a8:	9c 87       	std	Y+12, r25	; 0x0c
    25aa:	ad 87       	std	Y+13, r26	; 0x0d
    25ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	55 e4       	ldi	r21, 0x45	; 69
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8f 83       	std	Y+7, r24	; 0x07
    25c8:	98 87       	std	Y+8, r25	; 0x08
    25ca:	a9 87       	std	Y+9, r26	; 0x09
    25cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_writeCommmand+0x84c>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_writeCommmand+0x8ca>
	else if (__tmp > 65535)
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_writeCommmand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_writeCommmand+0x8ac>
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_writeCommmand+0x89a>
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_writeCommmand+0x88e>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_writeCommmand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_writeCommmand+0x8d6>
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    2682:	cd 59       	subi	r28, 0x9D	; 157
    2684:	df 4f       	sbci	r29, 0xFF	; 255
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 Data)
{
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	c3 56       	subi	r28, 0x63	; 99
    26a8:	d0 40       	sbci	r29, 0x00	; 0
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 59       	subi	r30, 0x9D	; 157
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 83       	st	Z, r24
	DIO_writePin (LCD_RS_PORT_ID,LCD_RS_PIN_ID, LOGIC_HIGH);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e1 5a       	subi	r30, 0xA1	; 161
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 e8       	ldi	r26, 0x80	; 128
    26d2:	bf e3       	ldi	r27, 0x3F	; 63
    26d4:	80 83       	st	Z, r24
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	a2 83       	std	Z+2, r26	; 0x02
    26da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	8e 01       	movw	r16, r28
    26de:	05 5a       	subi	r16, 0xA5	; 165
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	fe 01       	movw	r30, r28
    26e4:	e1 5a       	subi	r30, 0xA1	; 161
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a e7       	ldi	r20, 0x7A	; 122
    26f6:	55 e4       	ldi	r21, 0x45	; 69
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5a       	subi	r30, 0xA5	; 165
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	44 f4       	brge	.+16     	; 0x2738 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2728:	fe 01       	movw	r30, r28
    272a:	e7 5a       	subi	r30, 0xA7	; 167
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	64 c0       	rjmp	.+200    	; 0x2800 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2738:	fe 01       	movw	r30, r28
    273a:	e5 5a       	subi	r30, 0xA5	; 165
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	0c f0       	brlt	.+2      	; 0x2758 <LCD_displayCharacter+0xbe>
    2756:	43 c0       	rjmp	.+134    	; 0x27de <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	fe 01       	movw	r30, r28
    275a:	e1 5a       	subi	r30, 0xA1	; 161
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8e 01       	movw	r16, r28
    2778:	07 5a       	subi	r16, 0xA7	; 167
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	1f c0       	rjmp	.+62     	; 0x27ce <LCD_displayCharacter+0x134>
    2790:	fe 01       	movw	r30, r28
    2792:	e9 5a       	subi	r30, 0xA9	; 169
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 e9       	ldi	r24, 0x90	; 144
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	fe 01       	movw	r30, r28
    27a0:	e9 5a       	subi	r30, 0xA9	; 169
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_displayCharacter+0x10e>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e9 5a       	subi	r30, 0xA9	; 169
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	de 01       	movw	r26, r28
    27b8:	a7 5a       	subi	r26, 0xA7	; 167
    27ba:	bf 4f       	sbci	r27, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	e7 5a       	subi	r30, 0xA7	; 167
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	11 96       	adiw	r26, 0x01	; 1
    27ca:	9c 93       	st	X, r25
    27cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 5a       	subi	r30, 0xA7	; 167
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	d1 f6       	brne	.-76     	; 0x2790 <LCD_displayCharacter+0xf6>
    27dc:	27 c0       	rjmp	.+78     	; 0x282c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	8e 01       	movw	r16, r28
    27e0:	07 5a       	subi	r16, 0xA7	; 167
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 5a       	subi	r30, 0xA5	; 165
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f8 01       	movw	r30, r16
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
    2800:	de 01       	movw	r26, r28
    2802:	ab 5a       	subi	r26, 0xAB	; 171
    2804:	bf 4f       	sbci	r27, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	e7 5a       	subi	r30, 0xA7	; 167
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	8d 93       	st	X+, r24
    2812:	9c 93       	st	X, r25
    2814:	fe 01       	movw	r30, r28
    2816:	eb 5a       	subi	r30, 0xAB	; 171
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_displayCharacter+0x184>
    2822:	fe 01       	movw	r30, r28
    2824:	eb 5a       	subi	r30, 0xAB	; 171
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin (LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	62 e0       	ldi	r22, 0x02	; 2
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2836:	fe 01       	movw	r30, r28
    2838:	ef 5a       	subi	r30, 0xAF	; 175
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a0 e8       	ldi	r26, 0x80	; 128
    2842:	bf e3       	ldi	r27, 0x3F	; 63
    2844:	80 83       	st	Z, r24
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	a2 83       	std	Z+2, r26	; 0x02
    284a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284c:	8e 01       	movw	r16, r28
    284e:	03 5b       	subi	r16, 0xB3	; 179
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	ef 5a       	subi	r30, 0xAF	; 175
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	60 81       	ld	r22, Z
    285a:	71 81       	ldd	r23, Z+1	; 0x01
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a e7       	ldi	r20, 0x7A	; 122
    2866:	55 e4       	ldi	r21, 0x45	; 69
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287a:	fe 01       	movw	r30, r28
    287c:	e3 5b       	subi	r30, 0xB3	; 179
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	44 f4       	brge	.+16     	; 0x28a8 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2898:	fe 01       	movw	r30, r28
    289a:	e5 5b       	subi	r30, 0xB5	; 181
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	80 83       	st	Z, r24
    28a6:	64 c0       	rjmp	.+200    	; 0x2970 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    28a8:	fe 01       	movw	r30, r28
    28aa:	e3 5b       	subi	r30, 0xB3	; 179
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	0c f0       	brlt	.+2      	; 0x28c8 <LCD_displayCharacter+0x22e>
    28c6:	43 c0       	rjmp	.+134    	; 0x294e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c8:	fe 01       	movw	r30, r28
    28ca:	ef 5a       	subi	r30, 0xAF	; 175
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8e 01       	movw	r16, r28
    28e8:	05 5b       	subi	r16, 0xB5	; 181
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	f8 01       	movw	r30, r16
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
    28fe:	1f c0       	rjmp	.+62     	; 0x293e <LCD_displayCharacter+0x2a4>
    2900:	fe 01       	movw	r30, r28
    2902:	e7 5b       	subi	r30, 0xB7	; 183
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 e9       	ldi	r24, 0x90	; 144
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
    290e:	fe 01       	movw	r30, r28
    2910:	e7 5b       	subi	r30, 0xB7	; 183
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_displayCharacter+0x27e>
    291c:	fe 01       	movw	r30, r28
    291e:	e7 5b       	subi	r30, 0xB7	; 183
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	de 01       	movw	r26, r28
    2928:	a5 5b       	subi	r26, 0xB5	; 181
    292a:	bf 4f       	sbci	r27, 0xFF	; 255
    292c:	fe 01       	movw	r30, r28
    292e:	e5 5b       	subi	r30, 0xB5	; 181
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	9c 93       	st	X, r25
    293c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	fe 01       	movw	r30, r28
    2940:	e5 5b       	subi	r30, 0xB5	; 181
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	d1 f6       	brne	.-76     	; 0x2900 <LCD_displayCharacter+0x266>
    294c:	27 c0       	rjmp	.+78     	; 0x299c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294e:	8e 01       	movw	r16, r28
    2950:	05 5b       	subi	r16, 0xB5	; 181
    2952:	1f 4f       	sbci	r17, 0xFF	; 255
    2954:	fe 01       	movw	r30, r28
    2956:	e3 5b       	subi	r30, 0xB3	; 179
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	f8 01       	movw	r30, r16
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
    2970:	de 01       	movw	r26, r28
    2972:	a9 5b       	subi	r26, 0xB9	; 185
    2974:	bf 4f       	sbci	r27, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e5 5b       	subi	r30, 0xB5	; 181
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	8d 93       	st	X+, r24
    2982:	9c 93       	st	X, r25
    2984:	fe 01       	movw	r30, r28
    2986:	e9 5b       	subi	r30, 0xB9	; 185
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_displayCharacter+0x2f4>
    2992:	fe 01       	movw	r30, r28
    2994:	e9 5b       	subi	r30, 0xB9	; 185
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D4_ID, GET_BIT(Data,4));
    299c:	fe 01       	movw	r30, r28
    299e:	ed 59       	subi	r30, 0x9D	; 157
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 81       	ld	r24, Z
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	80 71       	andi	r24, 0x10	; 16
    29aa:	90 70       	andi	r25, 0x00	; 0
    29ac:	95 95       	asr	r25
    29ae:	87 95       	ror	r24
    29b0:	95 95       	asr	r25
    29b2:	87 95       	ror	r24
    29b4:	95 95       	asr	r25
    29b6:	87 95       	ror	r24
    29b8:	95 95       	asr	r25
    29ba:	87 95       	ror	r24
    29bc:	98 2f       	mov	r25, r24
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	49 2f       	mov	r20, r25
    29c4:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D5_ID, GET_BIT(Data,5));
    29c8:	fe 01       	movw	r30, r28
    29ca:	ed 59       	subi	r30, 0x9D	; 157
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	80 72       	andi	r24, 0x20	; 32
    29d6:	90 70       	andi	r25, 0x00	; 0
    29d8:	95 95       	asr	r25
    29da:	87 95       	ror	r24
    29dc:	95 95       	asr	r25
    29de:	87 95       	ror	r24
    29e0:	95 95       	asr	r25
    29e2:	87 95       	ror	r24
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	95 95       	asr	r25
    29ea:	87 95       	ror	r24
    29ec:	98 2f       	mov	r25, r24
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	49 2f       	mov	r20, r25
    29f4:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D6_ID, GET_BIT(Data,6));
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 59       	subi	r30, 0x9D	; 157
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	80 74       	andi	r24, 0x40	; 64
    2a06:	90 70       	andi	r25, 0x00	; 0
    2a08:	08 2e       	mov	r0, r24
    2a0a:	89 2f       	mov	r24, r25
    2a0c:	00 0c       	add	r0, r0
    2a0e:	88 1f       	adc	r24, r24
    2a10:	99 0b       	sbc	r25, r25
    2a12:	00 0c       	add	r0, r0
    2a14:	88 1f       	adc	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	98 2f       	mov	r25, r24
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	62 e0       	ldi	r22, 0x02	; 2
    2a1e:	49 2f       	mov	r20, r25
    2a20:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID, LCD_D7_ID, GET_BIT(Data,7));
    2a24:	fe 01       	movw	r30, r28
    2a26:	ed 59       	subi	r30, 0x9D	; 157
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	99 27       	eor	r25, r25
    2a32:	99 1f       	adc	r25, r25
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	64 e0       	ldi	r22, 0x04	; 4
    2a38:	49 2f       	mov	r20, r25
    2a3a:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 5b       	subi	r30, 0xBD	; 189
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e8       	ldi	r26, 0x80	; 128
    2a4a:	bf e3       	ldi	r27, 0x3F	; 63
    2a4c:	80 83       	st	Z, r24
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	a2 83       	std	Z+2, r26	; 0x02
    2a52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	8e 01       	movw	r16, r28
    2a56:	01 5c       	subi	r16, 0xC1	; 193
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ed 5b       	subi	r30, 0xBD	; 189
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a e7       	ldi	r20, 0x7A	; 122
    2a6e:	55 e4       	ldi	r21, 0x45	; 69
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	80 83       	st	Z, r24
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	a2 83       	std	Z+2, r26	; 0x02
    2a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a82:	fe 01       	movw	r30, r28
    2a84:	ff 96       	adiw	r30, 0x3f	; 63
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9e af       	std	Y+62, r25	; 0x3e
    2aa4:	8d af       	std	Y+61, r24	; 0x3d
    2aa6:	46 c0       	rjmp	.+140    	; 0x2b34 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ff 96       	adiw	r30, 0x3f	; 63
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	64 f5       	brge	.+88     	; 0x2b1c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ed 5b       	subi	r30, 0xBD	; 189
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	51 e4       	ldi	r21, 0x41	; 65
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	9e af       	std	Y+62, r25	; 0x3e
    2af0:	8d af       	std	Y+61, r24	; 0x3d
    2af2:	0f c0       	rjmp	.+30     	; 0x2b12 <LCD_displayCharacter+0x478>
    2af4:	80 e9       	ldi	r24, 0x90	; 144
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	9c af       	std	Y+60, r25	; 0x3c
    2afa:	8b af       	std	Y+59, r24	; 0x3b
    2afc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2afe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_displayCharacter+0x466>
    2b04:	9c af       	std	Y+60, r25	; 0x3c
    2b06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	9e af       	std	Y+62, r25	; 0x3e
    2b10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b12:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b14:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	69 f7       	brne	.-38     	; 0x2af4 <LCD_displayCharacter+0x45a>
    2b1a:	16 c0       	rjmp	.+44     	; 0x2b48 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ff 96       	adiw	r30, 0x3f	; 63
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e af       	std	Y+62, r25	; 0x3e
    2b32:	8d af       	std	Y+61, r24	; 0x3d
    2b34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b38:	9a af       	std	Y+58, r25	; 0x3a
    2b3a:	89 af       	std	Y+57, r24	; 0x39
    2b3c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_displayCharacter+0x4a6>
    2b44:	9a af       	std	Y+58, r25	; 0x3a
    2b46:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	62 e0       	ldi	r22, 0x02	; 2
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	8d ab       	std	Y+53, r24	; 0x35
    2b5c:	9e ab       	std	Y+54, r25	; 0x36
    2b5e:	af ab       	std	Y+55, r26	; 0x37
    2b60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6d a9       	ldd	r22, Y+53	; 0x35
    2b64:	7e a9       	ldd	r23, Y+54	; 0x36
    2b66:	8f a9       	ldd	r24, Y+55	; 0x37
    2b68:	98 ad       	ldd	r25, Y+56	; 0x38
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a e7       	ldi	r20, 0x7A	; 122
    2b70:	55 e4       	ldi	r21, 0x45	; 69
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	89 ab       	std	Y+49, r24	; 0x31
    2b7c:	9a ab       	std	Y+50, r25	; 0x32
    2b7e:	ab ab       	std	Y+51, r26	; 0x33
    2b80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	98 ab       	std	Y+48, r25	; 0x30
    2ba0:	8f a7       	std	Y+47, r24	; 0x2f
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    2baa:	9c a9       	ldd	r25, Y+52	; 0x34
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	98 ab       	std	Y+48, r25	; 0x30
    2be2:	8f a7       	std	Y+47, r24	; 0x2f
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_displayCharacter+0x56a>
    2be6:	80 e9       	ldi	r24, 0x90	; 144
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	9e a7       	std	Y+46, r25	; 0x2e
    2bec:	8d a7       	std	Y+45, r24	; 0x2d
    2bee:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_displayCharacter+0x558>
    2bf6:	9e a7       	std	Y+46, r25	; 0x2e
    2bf8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	98 ab       	std	Y+48, r25	; 0x30
    2c02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c06:	98 a9       	ldd	r25, Y+48	; 0x30
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_displayCharacter+0x54c>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c10:	7a a9       	ldd	r23, Y+50	; 0x32
    2c12:	8b a9       	ldd	r24, Y+51	; 0x33
    2c14:	9c a9       	ldd	r25, Y+52	; 0x34
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	98 ab       	std	Y+48, r25	; 0x30
    2c20:	8f a7       	std	Y+47, r24	; 0x2f
    2c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c24:	98 a9       	ldd	r25, Y+48	; 0x30
    2c26:	9c a7       	std	Y+44, r25	; 0x2c
    2c28:	8b a7       	std	Y+43, r24	; 0x2b
    2c2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0x594>
    2c32:	9c a7       	std	Y+44, r25	; 0x2c
    2c34:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e8       	ldi	r26, 0x80	; 128
    2c46:	bf e3       	ldi	r27, 0x3F	; 63
    2c48:	8f a3       	std	Y+39, r24	; 0x27
    2c4a:	98 a7       	std	Y+40, r25	; 0x28
    2c4c:	a9 a7       	std	Y+41, r26	; 0x29
    2c4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	6f a1       	ldd	r22, Y+39	; 0x27
    2c52:	78 a5       	ldd	r23, Y+40	; 0x28
    2c54:	89 a5       	ldd	r24, Y+41	; 0x29
    2c56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a e7       	ldi	r20, 0x7A	; 122
    2c5e:	55 e4       	ldi	r21, 0x45	; 69
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8b a3       	std	Y+35, r24	; 0x23
    2c6a:	9c a3       	std	Y+36, r25	; 0x24
    2c6c:	ad a3       	std	Y+37, r26	; 0x25
    2c6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c70:	6b a1       	ldd	r22, Y+35	; 0x23
    2c72:	7c a1       	ldd	r23, Y+36	; 0x24
    2c74:	8d a1       	ldd	r24, Y+37	; 0x25
    2c76:	9e a1       	ldd	r25, Y+38	; 0x26
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9a a3       	std	Y+34, r25	; 0x22
    2c8e:	89 a3       	std	Y+33, r24	; 0x21
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2c92:	6b a1       	ldd	r22, Y+35	; 0x23
    2c94:	7c a1       	ldd	r23, Y+36	; 0x24
    2c96:	8d a1       	ldd	r24, Y+37	; 0x25
    2c98:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	6f a1       	ldd	r22, Y+39	; 0x27
    2cac:	78 a5       	ldd	r23, Y+40	; 0x28
    2cae:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9a a3       	std	Y+34, r25	; 0x22
    2cd0:	89 a3       	std	Y+33, r24	; 0x21
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <LCD_displayCharacter+0x658>
    2cd4:	80 e9       	ldi	r24, 0x90	; 144
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	98 a3       	std	Y+32, r25	; 0x20
    2cda:	8f 8f       	std	Y+31, r24	; 0x1f
    2cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cde:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_displayCharacter+0x646>
    2ce4:	98 a3       	std	Y+32, r25	; 0x20
    2ce6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cea:	9a a1       	ldd	r25, Y+34	; 0x22
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9a a3       	std	Y+34, r25	; 0x22
    2cf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <LCD_displayCharacter+0x63a>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2d00:	8d a1       	ldd	r24, Y+37	; 0x25
    2d02:	9e a1       	ldd	r25, Y+38	; 0x26
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9a a3       	std	Y+34, r25	; 0x22
    2d0e:	89 a3       	std	Y+33, r24	; 0x21
    2d10:	89 a1       	ldd	r24, Y+33	; 0x21
    2d12:	9a a1       	ldd	r25, Y+34	; 0x22
    2d14:	9e 8f       	std	Y+30, r25	; 0x1e
    2d16:	8d 8f       	std	Y+29, r24	; 0x1d
    2d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_displayCharacter+0x682>
    2d20:	9e 8f       	std	Y+30, r25	; 0x1e
    2d22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writePin(LCD_DATA_PORT_ID,LCD_D4_ID,GET_BIT(Data,0));
    2d24:	fe 01       	movw	r30, r28
    2d26:	ed 59       	subi	r30, 0x9D	; 157
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	91 70       	andi	r25, 0x01	; 1
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	49 2f       	mov	r20, r25
    2d36:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D5_ID,GET_BIT(Data,1));
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ed 59       	subi	r30, 0x9D	; 157
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	82 70       	andi	r24, 0x02	; 2
    2d48:	90 70       	andi	r25, 0x00	; 0
    2d4a:	95 95       	asr	r25
    2d4c:	87 95       	ror	r24
    2d4e:	98 2f       	mov	r25, r24
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	49 2f       	mov	r20, r25
    2d56:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D6_ID,GET_BIT(Data,2));
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ed 59       	subi	r30, 0x9D	; 157
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	84 70       	andi	r24, 0x04	; 4
    2d68:	90 70       	andi	r25, 0x00	; 0
    2d6a:	95 95       	asr	r25
    2d6c:	87 95       	ror	r24
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	98 2f       	mov	r25, r24
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	62 e0       	ldi	r22, 0x02	; 2
    2d78:	49 2f       	mov	r20, r25
    2d7a:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_D7_ID,GET_BIT(Data,3));
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ed 59       	subi	r30, 0x9D	; 157
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	88 70       	andi	r24, 0x08	; 8
    2d8c:	90 70       	andi	r25, 0x00	; 0
    2d8e:	95 95       	asr	r25
    2d90:	87 95       	ror	r24
    2d92:	95 95       	asr	r25
    2d94:	87 95       	ror	r24
    2d96:	95 95       	asr	r25
    2d98:	87 95       	ror	r24
    2d9a:	98 2f       	mov	r25, r24
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	64 e0       	ldi	r22, 0x04	; 4
    2da0:	49 2f       	mov	r20, r25
    2da2:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e8       	ldi	r26, 0x80	; 128
    2dac:	bf e3       	ldi	r27, 0x3F	; 63
    2dae:	89 8f       	std	Y+25, r24	; 0x19
    2db0:	9a 8f       	std	Y+26, r25	; 0x1a
    2db2:	ab 8f       	std	Y+27, r26	; 0x1b
    2db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db6:	69 8d       	ldd	r22, Y+25	; 0x19
    2db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	4a e7       	ldi	r20, 0x7A	; 122
    2dc4:	55 e4       	ldi	r21, 0x45	; 69
    2dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	8d 8b       	std	Y+21, r24	; 0x15
    2dd0:	9e 8b       	std	Y+22, r25	; 0x16
    2dd2:	af 8b       	std	Y+23, r26	; 0x17
    2dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dda:	8f 89       	ldd	r24, Y+23	; 0x17
    2ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dea:	88 23       	and	r24, r24
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9c 8b       	std	Y+20, r25	; 0x14
    2df4:	8b 8b       	std	Y+19, r24	; 0x13
    2df6:	3f c0       	rjmp	.+126    	; 0x2e76 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2df8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	4c f5       	brge	.+82     	; 0x2e62 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	69 8d       	ldd	r22, Y+25	; 0x19
    2e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e2       	ldi	r20, 0x20	; 32
    2e1e:	51 e4       	ldi	r21, 0x41	; 65
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9c 8b       	std	Y+20, r25	; 0x14
    2e36:	8b 8b       	std	Y+19, r24	; 0x13
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <LCD_displayCharacter+0x7be>
    2e3a:	80 e9       	ldi	r24, 0x90	; 144
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	9a 8b       	std	Y+18, r25	; 0x12
    2e40:	89 8b       	std	Y+17, r24	; 0x11
    2e42:	89 89       	ldd	r24, Y+17	; 0x11
    2e44:	9a 89       	ldd	r25, Y+18	; 0x12
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <LCD_displayCharacter+0x7ac>
    2e4a:	9a 8b       	std	Y+18, r25	; 0x12
    2e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	9c 8b       	std	Y+20, r25	; 0x14
    2e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e58:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	69 f7       	brne	.-38     	; 0x2e3a <LCD_displayCharacter+0x7a0>
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e62:	6d 89       	ldd	r22, Y+21	; 0x15
    2e64:	7e 89       	ldd	r23, Y+22	; 0x16
    2e66:	8f 89       	ldd	r24, Y+23	; 0x17
    2e68:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	98 8b       	std	Y+16, r25	; 0x10
    2e7c:	8f 87       	std	Y+15, r24	; 0x0f
    2e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e80:	98 89       	ldd	r25, Y+16	; 0x10
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <LCD_displayCharacter+0x7e8>
    2e86:	98 8b       	std	Y+16, r25	; 0x10
    2e88:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	62 e0       	ldi	r22, 0x02	; 2
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 cd 0b 	call	0x179a	; 0x179a <DIO_writePin>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 e8       	ldi	r26, 0x80	; 128
    2e9a:	bf e3       	ldi	r27, 0x3F	; 63
    2e9c:	8b 87       	std	Y+11, r24	; 0x0b
    2e9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ea0:	ad 87       	std	Y+13, r26	; 0x0d
    2ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8f 83       	std	Y+7, r24	; 0x07
    2ebe:	98 87       	std	Y+8, r25	; 0x08
    2ec0:	a9 87       	std	Y+9, r26	; 0x09
    2ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee8:	78 85       	ldd	r23, Y+8	; 0x08
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <LCD_displayCharacter+0x8ac>
    2f28:	80 e9       	ldi	r24, 0x90	; 144
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x89a>
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <LCD_displayCharacter+0x88e>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	6f 81       	ldd	r22, Y+7	; 0x07
    2f52:	78 85       	ldd	r23, Y+8	; 0x08
    2f54:	89 85       	ldd	r24, Y+9	; 0x09
    2f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_displayCharacter+0x8d6>
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    2f78:	cd 59       	subi	r28, 0x9D	; 157
    2f7a:	df 4f       	sbci	r29, 0xFF	; 255
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <LCD_displayString>:


void LCD_displayString (const char *str)
{
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <LCD_displayString+0x6>
    2f96:	0f 92       	push	r0
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	9b 83       	std	Y+3, r25	; 0x03
    2f9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2fa0:	19 82       	std	Y+1, r1	; 0x01
    2fa2:	0e c0       	rjmp	.+28     	; 0x2fc0 <LCD_displayString+0x30>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	80 81       	ld	r24, Z
    2fb6:	0e 94 4d 13 	call	0x269a	; 0x269a <LCD_displayCharacter>
		i++;
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString (const char *str)
{
	uint8 i=0;

	while (str[i] != '\0')
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e2 0f       	add	r30, r18
    2fce:	f3 1f       	adc	r31, r19
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 23       	and	r24, r24
    2fd4:	39 f7       	brne	.-50     	; 0x2fa4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}

}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <LCD_setCursor>:

void LCD_setCursor (uint8 row, uint8 column)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <LCD_setCursor+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <LCD_setCursor+0x8>
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
    2ff2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 memoryAddress;

	switch (row)
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	28 2f       	mov	r18, r24
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	3d 83       	std	Y+5, r19	; 0x05
    2ffc:	2c 83       	std	Y+4, r18	; 0x04
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	9d 81       	ldd	r25, Y+5	; 0x05
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	91 05       	cpc	r25, r1
    3006:	c1 f0       	breq	.+48     	; 0x3038 <LCD_setCursor+0x56>
    3008:	2c 81       	ldd	r18, Y+4	; 0x04
    300a:	3d 81       	ldd	r19, Y+5	; 0x05
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	31 05       	cpc	r19, r1
    3010:	2c f4       	brge	.+10     	; 0x301c <LCD_setCursor+0x3a>
    3012:	8c 81       	ldd	r24, Y+4	; 0x04
    3014:	9d 81       	ldd	r25, Y+5	; 0x05
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	61 f0       	breq	.+24     	; 0x3032 <LCD_setCursor+0x50>
    301a:	19 c0       	rjmp	.+50     	; 0x304e <LCD_setCursor+0x6c>
    301c:	2c 81       	ldd	r18, Y+4	; 0x04
    301e:	3d 81       	ldd	r19, Y+5	; 0x05
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	31 05       	cpc	r19, r1
    3024:	69 f0       	breq	.+26     	; 0x3040 <LCD_setCursor+0x5e>
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	9d 81       	ldd	r25, Y+5	; 0x05
    302a:	83 30       	cpi	r24, 0x03	; 3
    302c:	91 05       	cpc	r25, r1
    302e:	61 f0       	breq	.+24     	; 0x3048 <LCD_setCursor+0x66>
    3030:	0e c0       	rjmp	.+28     	; 0x304e <LCD_setCursor+0x6c>
	{
	case 0:
		memoryAddress = column;
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	0b c0       	rjmp	.+22     	; 0x304e <LCD_setCursor+0x6c>
		break;
	case 1:
		memoryAddress = column+0x40;
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	80 5c       	subi	r24, 0xC0	; 192
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	07 c0       	rjmp	.+14     	; 0x304e <LCD_setCursor+0x6c>
		break;
	case 2:
		memoryAddress = column+0x10;
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	80 5f       	subi	r24, 0xF0	; 240
    3044:	89 83       	std	Y+1, r24	; 0x01
    3046:	03 c0       	rjmp	.+6      	; 0x304e <LCD_setCursor+0x6c>
		break;
	case 3:
		memoryAddress = column+0x50;
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	80 5b       	subi	r24, 0xB0	; 176
    304c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_writeCommmand(memoryAddress | LCD_SET_CURSOR_LOCATION);
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	80 68       	ori	r24, 0x80	; 128
    3052:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	62 97       	sbiw	r28, 0x12	; 18
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	9e 01       	movw	r18, r28
    3084:	2f 5f       	subi	r18, 0xFF	; 255
    3086:	3f 4f       	sbci	r19, 0xFF	; 255
    3088:	b9 01       	movw	r22, r18
    308a:	4a e0       	ldi	r20, 0x0A	; 10
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	0e 94 bc 18 	call	0x3178	; 0x3178 <itoa>
   LCD_displayString(buff); /* Display the string */
    3092:	ce 01       	movw	r24, r28
    3094:	01 96       	adiw	r24, 0x01	; 1
    3096:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_displayString>
}
    309a:	62 96       	adiw	r28, 0x12	; 18
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	LCD_writeCommmand(LCD_CLEAR_COMMAND); /* Send clear display command */
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_writeCommmand>
}
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <LCD_displayStringRowColumn+0x6>
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <LCD_displayStringRowColumn+0x8>
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	6a 83       	std	Y+2, r22	; 0x02
    30d0:	5c 83       	std	Y+4, r21	; 0x04
    30d2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_setCursor(row,col); /* go to to the required LCD position */
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	6a 81       	ldd	r22, Y+2	; 0x02
    30d8:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <LCD_setCursor>
	LCD_displayString(Str); /* display the string */
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_displayString>
}
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <__udivmodqi4>:
    30f2:	99 1b       	sub	r25, r25
    30f4:	79 e0       	ldi	r23, 0x09	; 9
    30f6:	04 c0       	rjmp	.+8      	; 0x3100 <__udivmodqi4_ep>

000030f8 <__udivmodqi4_loop>:
    30f8:	99 1f       	adc	r25, r25
    30fa:	96 17       	cp	r25, r22
    30fc:	08 f0       	brcs	.+2      	; 0x3100 <__udivmodqi4_ep>
    30fe:	96 1b       	sub	r25, r22

00003100 <__udivmodqi4_ep>:
    3100:	88 1f       	adc	r24, r24
    3102:	7a 95       	dec	r23
    3104:	c9 f7       	brne	.-14     	; 0x30f8 <__udivmodqi4_loop>
    3106:	80 95       	com	r24
    3108:	08 95       	ret

0000310a <__prologue_saves__>:
    310a:	2f 92       	push	r2
    310c:	3f 92       	push	r3
    310e:	4f 92       	push	r4
    3110:	5f 92       	push	r5
    3112:	6f 92       	push	r6
    3114:	7f 92       	push	r7
    3116:	8f 92       	push	r8
    3118:	9f 92       	push	r9
    311a:	af 92       	push	r10
    311c:	bf 92       	push	r11
    311e:	cf 92       	push	r12
    3120:	df 92       	push	r13
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	ca 1b       	sub	r28, r26
    3134:	db 0b       	sbc	r29, r27
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	09 94       	ijmp

00003142 <__epilogue_restores__>:
    3142:	2a 88       	ldd	r2, Y+18	; 0x12
    3144:	39 88       	ldd	r3, Y+17	; 0x11
    3146:	48 88       	ldd	r4, Y+16	; 0x10
    3148:	5f 84       	ldd	r5, Y+15	; 0x0f
    314a:	6e 84       	ldd	r6, Y+14	; 0x0e
    314c:	7d 84       	ldd	r7, Y+13	; 0x0d
    314e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3150:	9b 84       	ldd	r9, Y+11	; 0x0b
    3152:	aa 84       	ldd	r10, Y+10	; 0x0a
    3154:	b9 84       	ldd	r11, Y+9	; 0x09
    3156:	c8 84       	ldd	r12, Y+8	; 0x08
    3158:	df 80       	ldd	r13, Y+7	; 0x07
    315a:	ee 80       	ldd	r14, Y+6	; 0x06
    315c:	fd 80       	ldd	r15, Y+5	; 0x05
    315e:	0c 81       	ldd	r16, Y+4	; 0x04
    3160:	1b 81       	ldd	r17, Y+3	; 0x03
    3162:	aa 81       	ldd	r26, Y+2	; 0x02
    3164:	b9 81       	ldd	r27, Y+1	; 0x01
    3166:	ce 0f       	add	r28, r30
    3168:	d1 1d       	adc	r29, r1
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	ed 01       	movw	r28, r26
    3176:	08 95       	ret

00003178 <itoa>:
    3178:	fb 01       	movw	r30, r22
    317a:	9f 01       	movw	r18, r30
    317c:	e8 94       	clt
    317e:	42 30       	cpi	r20, 0x02	; 2
    3180:	c4 f0       	brlt	.+48     	; 0x31b2 <itoa+0x3a>
    3182:	45 32       	cpi	r20, 0x25	; 37
    3184:	b4 f4       	brge	.+44     	; 0x31b2 <itoa+0x3a>
    3186:	4a 30       	cpi	r20, 0x0A	; 10
    3188:	29 f4       	brne	.+10     	; 0x3194 <itoa+0x1c>
    318a:	97 fb       	bst	r25, 7
    318c:	1e f4       	brtc	.+6      	; 0x3194 <itoa+0x1c>
    318e:	90 95       	com	r25
    3190:	81 95       	neg	r24
    3192:	9f 4f       	sbci	r25, 0xFF	; 255
    3194:	64 2f       	mov	r22, r20
    3196:	77 27       	eor	r23, r23
    3198:	0e 94 ed 18 	call	0x31da	; 0x31da <__udivmodhi4>
    319c:	80 5d       	subi	r24, 0xD0	; 208
    319e:	8a 33       	cpi	r24, 0x3A	; 58
    31a0:	0c f0       	brlt	.+2      	; 0x31a4 <itoa+0x2c>
    31a2:	89 5d       	subi	r24, 0xD9	; 217
    31a4:	81 93       	st	Z+, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	a1 f7       	brne	.-24     	; 0x3194 <itoa+0x1c>
    31ac:	16 f4       	brtc	.+4      	; 0x31b2 <itoa+0x3a>
    31ae:	5d e2       	ldi	r21, 0x2D	; 45
    31b0:	51 93       	st	Z+, r21
    31b2:	10 82       	st	Z, r1
    31b4:	c9 01       	movw	r24, r18
    31b6:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <strrev>

000031ba <strrev>:
    31ba:	dc 01       	movw	r26, r24
    31bc:	fc 01       	movw	r30, r24
    31be:	67 2f       	mov	r22, r23
    31c0:	71 91       	ld	r23, Z+
    31c2:	77 23       	and	r23, r23
    31c4:	e1 f7       	brne	.-8      	; 0x31be <strrev+0x4>
    31c6:	32 97       	sbiw	r30, 0x02	; 2
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <strrev+0x18>
    31ca:	7c 91       	ld	r23, X
    31cc:	6d 93       	st	X+, r22
    31ce:	70 83       	st	Z, r23
    31d0:	62 91       	ld	r22, -Z
    31d2:	ae 17       	cp	r26, r30
    31d4:	bf 07       	cpc	r27, r31
    31d6:	c8 f3       	brcs	.-14     	; 0x31ca <strrev+0x10>
    31d8:	08 95       	ret

000031da <__udivmodhi4>:
    31da:	aa 1b       	sub	r26, r26
    31dc:	bb 1b       	sub	r27, r27
    31de:	51 e1       	ldi	r21, 0x11	; 17
    31e0:	07 c0       	rjmp	.+14     	; 0x31f0 <__udivmodhi4_ep>

000031e2 <__udivmodhi4_loop>:
    31e2:	aa 1f       	adc	r26, r26
    31e4:	bb 1f       	adc	r27, r27
    31e6:	a6 17       	cp	r26, r22
    31e8:	b7 07       	cpc	r27, r23
    31ea:	10 f0       	brcs	.+4      	; 0x31f0 <__udivmodhi4_ep>
    31ec:	a6 1b       	sub	r26, r22
    31ee:	b7 0b       	sbc	r27, r23

000031f0 <__udivmodhi4_ep>:
    31f0:	88 1f       	adc	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	5a 95       	dec	r21
    31f6:	a9 f7       	brne	.-22     	; 0x31e2 <__udivmodhi4_loop>
    31f8:	80 95       	com	r24
    31fa:	90 95       	com	r25
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	08 95       	ret

00003202 <_exit>:
    3202:	f8 94       	cli

00003204 <__stop_program>:
    3204:	ff cf       	rjmp	.-2      	; 0x3204 <__stop_program>
